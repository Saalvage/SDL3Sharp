// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetCPUCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCPUCount();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetCPUCacheLineSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCPUCacheLineSize();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasAltiVec", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasAltiVec();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasMMX", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasMMX();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasSSE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasSSE();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasSSE2", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasSSE2();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasSSE3", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasSSE3();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasSSE41", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasSSE41();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasSSE42", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasSSE42();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasAVX", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasAVX();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasAVX2", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasAVX2();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasAVX512F", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasAVX512F();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasARMSIMD", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasARMSIMD();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasNEON", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasNEON();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasLSX", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasLSX();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasLASX", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasLASX();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetSystemRAM", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSystemRAM();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SIMDGetAlignment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong SIMDGetAlignment();
        }

        /// <summary>Get the number of CPU cores available.</summary>
        /// <remarks>
        /// <para>the total number of logical CPU cores. On CPUs that include</para>
        /// <para>technologies such as hyperthreading, the number of logical cores</para>
        /// <para>may be more than the number of physical cores.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int GetCPUCount()
        {
            var ___ret = __Internal.GetCPUCount();
            return ___ret;
        }

        /// <summary>Determine the L1 cache line size of the CPU.</summary>
        /// <remarks>
        /// <para>This is useful for determining multi-threaded structure padding or SIMD</para>
        /// <para>prefetch sizes.</para>
        /// <para>the L1 cache line size of the CPU, in bytes.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int GetCPUCacheLineSize()
        {
            var ___ret = __Internal.GetCPUCacheLineSize();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has AltiVec features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using PowerPC instruction</para>
        /// <para>sets.</para>
        /// <para>SDL_TRUE if the CPU has AltiVec features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE41</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasAltiVec()
        {
            var ___ret = __Internal.HasAltiVec();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has MMX features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has MMX features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE41</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasMMX()
        {
            var ___ret = __Internal.HasMMX();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has SSE features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has SSE features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE41</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasSSE()
        {
            var ___ret = __Internal.HasSSE();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has SSE2 features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has SSE2 features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE41</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasSSE2()
        {
            var ___ret = __Internal.HasSSE2();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has SSE3 features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has SSE3 features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE41</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasSSE3()
        {
            var ___ret = __Internal.HasSSE3();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has SSE4.1 features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has SSE4.1 features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasSSE41()
        {
            var ___ret = __Internal.HasSSE41();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has SSE4.2 features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has SSE4.2 features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE41</para>
        /// </remarks>
        public static bool HasSSE42()
        {
            var ___ret = __Internal.HasSSE42();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has AVX features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has AVX features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE41</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasAVX()
        {
            var ___ret = __Internal.HasAVX();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has AVX2 features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has AVX2 features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX512F</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE41</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasAVX2()
        {
            var ___ret = __Internal.HasAVX2();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has AVX-512F (foundation) features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has AVX-512F features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasAltiVec</para>
        /// <para>SDL_HasAVX</para>
        /// <para>SDL_HasAVX2</para>
        /// <para>SDL_HasMMX</para>
        /// <para>SDL_HasSSE</para>
        /// <para>SDL_HasSSE2</para>
        /// <para>SDL_HasSSE3</para>
        /// <para>SDL_HasSSE41</para>
        /// <para>SDL_HasSSE42</para>
        /// </remarks>
        public static bool HasAVX512F()
        {
            var ___ret = __Internal.HasAVX512F();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has ARM SIMD (ARMv6) features.</summary>
        /// <remarks>
        /// <para>This is different from ARM NEON, which is a different instruction set.</para>
        /// <para>This always returns false on CPUs that aren't using ARM instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has ARM SIMD features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasNEON</para>
        /// </remarks>
        public static bool HasARMSIMD()
        {
            var ___ret = __Internal.HasARMSIMD();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has NEON (ARM SIMD) features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using ARM instruction sets.</para>
        /// <para>SDL_TRUE if the CPU has ARM NEON features or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static bool HasNEON()
        {
            var ___ret = __Internal.HasNEON();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has LSX (LOONGARCH SIMD) features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using LOONGARCH instruction</para>
        /// <para>sets.</para>
        /// <para>SDL_TRUE if the CPU has LOONGARCH LSX features or SDL_FALSE if</para>
        /// <para>not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static bool HasLSX()
        {
            var ___ret = __Internal.HasLSX();
            return ___ret;
        }

        /// <summary>Determine whether the CPU has LASX (LOONGARCH SIMD) features.</summary>
        /// <remarks>
        /// <para>This always returns false on CPUs that aren't using LOONGARCH instruction</para>
        /// <para>sets.</para>
        /// <para>SDL_TRUE if the CPU has LOONGARCH LASX features or SDL_FALSE if</para>
        /// <para>not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static bool HasLASX()
        {
            var ___ret = __Internal.HasLASX();
            return ___ret;
        }

        /// <summary>Get the amount of RAM configured in the system.</summary>
        /// <remarks>
        /// <para>the amount of RAM configured in the system in MiB.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int GetSystemRAM()
        {
            var ___ret = __Internal.GetSystemRAM();
            return ___ret;
        }

        /// <summary>Report the alignment this system needs for SIMD allocations.</summary>
        /// <remarks>
        /// <para>This will return the minimum number of bytes to which a pointer must be</para>
        /// <para>aligned to be compatible with SIMD instructions on the current machine. For</para>
        /// <para>example, if the machine supports SSE only, it will return 16, but if it</para>
        /// <para>supports AVX-512F, it'll return 64 (etc). This only reports values for</para>
        /// <para>instruction sets SDL knows about, so if your SDL build doesn't have</para>
        /// <para>SDL_HasAVX512F(), then it might return 16 for the SSE support it sees and</para>
        /// <para>not 64 for the AVX-512 instructions that exist but SDL doesn't know about.</para>
        /// <para>Plan accordingly.</para>
        /// <para>the alignment in bytes needed for available, known SIMD</para>
        /// <para>instructions.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_aligned_alloc</para>
        /// <para>SDL_aligned_free</para>
        /// </remarks>
        public static ulong SIMDGetAlignment()
        {
            var ___ret = __Internal.SIMDGetAlignment();
            return ___ret;
        }
    }
}
