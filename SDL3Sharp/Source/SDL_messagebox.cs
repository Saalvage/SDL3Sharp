// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>SDL_MessageBox flags. If supported will display warning icon, etc.</summary>
    [Flags]
    public enum MessageBoxFlags
    {
        /// <summary>error dialog</summary>
        Error = 16,
        /// <summary>warning dialog</summary>
        Warning = 32,
        /// <summary>informational dialog</summary>
        Information = 64,
        /// <summary>buttons placed left to right</summary>
        ButtonsLeftToRight = 128,
        /// <summary>buttons placed right to left</summary>
        ButtonsRightToLeft = 256
    }

    /// <summary>Flags for SDL_MessageBoxButtonData.</summary>
    public enum MessageBoxButtonFlags
    {
        /// <summary>Marks the default button when return is hit</summary>
        ReturnkeyDefault = 1,
        /// <summary>Marks the default button when escape is hit</summary>
        EscapekeyDefault = 2
    }

    public enum MessageBoxColorType
    {
        Background = 0,
        Text = 1,
        ButtonBorder = 2,
        ButtonBackground = 3,
        ButtonSelected = 4,
        Max = 5
    }

    /// <summary>SDL_MessageBox flags. If supported will display warning icon, etc.</summary>
    /// <summary>Flags for SDL_MessageBoxButtonData.</summary>
    /// <summary>Individual button data.</summary>
    /// <summary>RGB value used in a message box color scheme</summary>
    /// <summary>A set of colors to use for message box dialogs</summary>
    /// <summary>MessageBox structure containing title, text, window, etc.</summary>
    /// <summary>Individual button data.</summary>
    public unsafe partial class MessageBoxButtonData : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16, Pack = 8)]
        public partial struct __Internal
        {
            internal uint flags;
            internal int buttonID;
            internal __IntPtr text;

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_MessageBoxButtonData@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.MessageBoxButtonData> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.MessageBoxButtonData>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.MessageBoxButtonData managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.MessageBoxButtonData managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __text_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static MessageBoxButtonData __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new MessageBoxButtonData(native.ToPointer(), skipVTables);
        }

        internal static MessageBoxButtonData __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (MessageBoxButtonData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static MessageBoxButtonData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new MessageBoxButtonData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MessageBoxButtonData(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected MessageBoxButtonData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public MessageBoxButtonData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.MessageBoxButtonData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public MessageBoxButtonData(global::SDL3Sharp.MessageBoxButtonData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.MessageBoxButtonData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.MessageBoxButtonData.__Internal*) __Instance) = *((global::SDL3Sharp.MessageBoxButtonData.__Internal*) _0.__Instance);
            if (_0.__text_OwnsNativeMemory)
                this.Text = _0.Text;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__text_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->text);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>::SDL_MessageBoxButtonFlags</summary>
        public uint Flags
        {
            get
            {
                return ((__Internal*)__Instance)->flags;
            }

            set
            {
                ((__Internal*)__Instance)->flags = value;
            }
        }

        /// <summary>User defined button id (value returned via SDL_ShowMessageBox)</summary>
        public int ButtonID
        {
            get
            {
                return ((__Internal*)__Instance)->buttonID;
            }

            set
            {
                ((__Internal*)__Instance)->buttonID = value;
            }
        }

        /// <summary>The UTF-8 button text</summary>
        public string Text
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->text);
            }

            set
            {
                if (__text_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->text);
                __text_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->text = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->text = (__IntPtr) __bytePtr0;
            }
        }
    }

    /// <summary>RGB value used in a message box color scheme</summary>
    public unsafe partial class MessageBoxColor : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 3, Pack = 8)]
        public partial struct __Internal
        {
            internal byte r;
            internal byte g;
            internal byte b;

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_MessageBoxColor@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.MessageBoxColor> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.MessageBoxColor>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.MessageBoxColor managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.MessageBoxColor managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static MessageBoxColor __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new MessageBoxColor(native.ToPointer(), skipVTables);
        }

        internal static MessageBoxColor __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (MessageBoxColor)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static MessageBoxColor __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new MessageBoxColor(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MessageBoxColor(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected MessageBoxColor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public MessageBoxColor()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.MessageBoxColor.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public MessageBoxColor(global::SDL3Sharp.MessageBoxColor _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.MessageBoxColor.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.MessageBoxColor.__Internal*) __Instance) = *((global::SDL3Sharp.MessageBoxColor.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte R
        {
            get
            {
                return ((__Internal*)__Instance)->r;
            }

            set
            {
                ((__Internal*)__Instance)->r = value;
            }
        }

        public byte G
        {
            get
            {
                return ((__Internal*)__Instance)->g;
            }

            set
            {
                ((__Internal*)__Instance)->g = value;
            }
        }

        public byte B
        {
            get
            {
                return ((__Internal*)__Instance)->b;
            }

            set
            {
                ((__Internal*)__Instance)->b = value;
            }
        }
    }

    /// <summary>A set of colors to use for message box dialogs</summary>
    public unsafe partial class MessageBoxColorScheme : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 15, Pack = 8)]
        public partial struct __Internal
        {
            internal fixed byte colors[15];

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_MessageBoxColorScheme@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.MessageBoxColorScheme> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.MessageBoxColorScheme>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.MessageBoxColorScheme managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.MessageBoxColorScheme managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static MessageBoxColorScheme __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new MessageBoxColorScheme(native.ToPointer(), skipVTables);
        }

        internal static MessageBoxColorScheme __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (MessageBoxColorScheme)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static MessageBoxColorScheme __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new MessageBoxColorScheme(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MessageBoxColorScheme(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected MessageBoxColorScheme(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public MessageBoxColorScheme()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.MessageBoxColorScheme.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public MessageBoxColorScheme(global::SDL3Sharp.MessageBoxColorScheme _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.MessageBoxColorScheme.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.MessageBoxColorScheme.__Internal*) __Instance) = *((global::SDL3Sharp.MessageBoxColorScheme.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SDL3Sharp.MessageBoxColor[] Colors
        {
            get
            {
                global::SDL3Sharp.MessageBoxColor[] __value = null;
                if (((__Internal*)__Instance)->colors != null)
                {
                    __value = new global::SDL3Sharp.MessageBoxColor[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = global::SDL3Sharp.MessageBoxColor.__GetOrCreateInstance((IntPtr)((global::SDL3Sharp.MessageBoxColor.__Internal*)&(((__Internal*)__Instance)->colors[i * sizeof(global::SDL3Sharp.MessageBoxColor.__Internal)])), true, true);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 5)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 5; i++)
                        *(global::SDL3Sharp.MessageBoxColor.__Internal*) &((__Internal*)__Instance)->colors[i * sizeof(global::SDL3Sharp.MessageBoxColor.__Internal)] = *(global::SDL3Sharp.MessageBoxColor.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    /// <summary>MessageBox structure containing title, text, window, etc.</summary>
    public unsafe partial class MessageBoxData : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56, Pack = 8)]
        public partial struct __Internal
        {
            internal uint flags;
            internal __IntPtr window;
            internal __IntPtr title;
            internal __IntPtr message;
            internal int numbuttons;
            internal __IntPtr buttons;
            internal __IntPtr colorScheme;

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_MessageBoxData@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.MessageBoxData> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.MessageBoxData>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.MessageBoxData managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.MessageBoxData managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __title_OwnsNativeMemory = false;
        private bool __message_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static MessageBoxData __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new MessageBoxData(native.ToPointer(), skipVTables);
        }

        internal static MessageBoxData __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (MessageBoxData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static MessageBoxData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new MessageBoxData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MessageBoxData(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected MessageBoxData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public MessageBoxData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.MessageBoxData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public MessageBoxData(global::SDL3Sharp.MessageBoxData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.MessageBoxData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.MessageBoxData.__Internal*) __Instance) = *((global::SDL3Sharp.MessageBoxData.__Internal*) _0.__Instance);
            if (_0.__title_OwnsNativeMemory)
                this.Title = _0.Title;
            if (_0.__message_OwnsNativeMemory)
                this.Message = _0.Message;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__title_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->title);
            if (__message_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->message);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>::SDL_MessageBoxFlags</summary>
        public uint Flags
        {
            get
            {
                return ((__Internal*)__Instance)->flags;
            }

            set
            {
                ((__Internal*)__Instance)->flags = value;
            }
        }

        /// <summary>Parent window, can be NULL</summary>
        public global::SDL3Sharp.Window Window
        {
            get
            {
                var __result0 = global::SDL3Sharp.Window.__GetOrCreateInstance(((__Internal*)__Instance)->window, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->window = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>UTF-8 title</summary>
        public string Title
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->title);
            }

            set
            {
                if (__title_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->title);
                __title_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->title = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->title = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>UTF-8 message text</summary>
        public string Message
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->message);
            }

            set
            {
                if (__message_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->message);
                __message_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->message = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->message = (__IntPtr) __bytePtr0;
            }
        }

        public int Numbuttons
        {
            get
            {
                return ((__Internal*)__Instance)->numbuttons;
            }

            set
            {
                ((__Internal*)__Instance)->numbuttons = value;
            }
        }

        public global::SDL3Sharp.MessageBoxButtonData Buttons
        {
            get
            {
                var __result0 = global::SDL3Sharp.MessageBoxButtonData.__GetOrCreateInstance(((__Internal*)__Instance)->buttons, false);
                return __result0;
            }
        }

        /// <summary>::SDL_MessageBoxColorScheme, can be NULL to use system settings</summary>
        public global::SDL3Sharp.MessageBoxColorScheme ColorScheme
        {
            get
            {
                var __result0 = global::SDL3Sharp.MessageBoxColorScheme.__GetOrCreateInstance(((__Internal*)__Instance)->colorScheme, false);
                return __result0;
            }
        }
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ShowMessageBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ShowMessageBox(__IntPtr messageboxdata, int* buttonid);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ShowSimpleMessageBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ShowSimpleMessageBox(uint flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string title, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message, __IntPtr window);
        }

        /// <summary>Create a modal message box.</summary>
        /// <param name="messageboxdata">
        /// <para>the SDL_MessageBoxData structure with title, text and</para>
        /// <para>other options</para>
        /// </param>
        /// <param name="buttonid">the pointer to which user id of hit button should be copied</param>
        /// <remarks>
        /// <para>If your needs aren't complex, it might be easier to use</para>
        /// <para>SDL_ShowSimpleMessageBox.</para>
        /// <para>This function should be called on the thread that created the parent</para>
        /// <para>window, or on the main thread if the messagebox has no parent. It will</para>
        /// <para>block execution of that thread until the user clicks a button or closes the</para>
        /// <para>messagebox.</para>
        /// <para>This function may be called at any time, even before SDL_Init(). This makes</para>
        /// <para>it useful for reporting errors like a failure to create a renderer or</para>
        /// <para>OpenGL context.</para>
        /// <para>On X11, SDL rolls its own dialog box with X11 primitives instead of a</para>
        /// <para>formal toolkit like GTK+ or Qt.</para>
        /// <para>Note that if SDL_Init() would fail because there isn't any available video</para>
        /// <para>target, this function is likely to fail for the same reasons. If this is a</para>
        /// <para>concern, check the return value from this function and fall back to writing</para>
        /// <para>to stderr if you can.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_ShowSimpleMessageBox</para>
        /// </remarks>
        public static int ShowMessageBox(global::SDL3Sharp.MessageBoxData messageboxdata, ref int buttonid)
        {
            var __arg0 = messageboxdata is null ? __IntPtr.Zero : messageboxdata.__Instance;
            fixed (int* __buttonid1 = &buttonid)
            {
                var __arg1 = __buttonid1;
                var ___ret = __Internal.ShowMessageBox(__arg0, __arg1);
                return ___ret;
            }
        }

        /// <summary>Display a simple modal message box.</summary>
        /// <param name="flags">an SDL_MessageBoxFlags value</param>
        /// <param name="title">UTF-8 title text</param>
        /// <param name="message">UTF-8 message text</param>
        /// <param name="window">the parent window, or NULL for no parent</param>
        /// <remarks>
        /// <para>If your needs aren't complex, this function is preferred over</para>
        /// <para>SDL_ShowMessageBox.</para>
        /// <para>`flags` may be any of the following:</para>
        /// <para>- `SDL_MESSAGEBOX_ERROR`: error dialog</para>
        /// <para>- `SDL_MESSAGEBOX_WARNING`: warning dialog</para>
        /// <para>- `SDL_MESSAGEBOX_INFORMATION`: informational dialog</para>
        /// <para>This function should be called on the thread that created the parent</para>
        /// <para>window, or on the main thread if the messagebox has no parent. It will</para>
        /// <para>block execution of that thread until the user clicks a button or closes the</para>
        /// <para>messagebox.</para>
        /// <para>This function may be called at any time, even before SDL_Init(). This makes</para>
        /// <para>it useful for reporting errors like a failure to create a renderer or</para>
        /// <para>OpenGL context.</para>
        /// <para>On X11, SDL rolls its own dialog box with X11 primitives instead of a</para>
        /// <para>formal toolkit like GTK+ or Qt.</para>
        /// <para>Note that if SDL_Init() would fail because there isn't any available video</para>
        /// <para>target, this function is likely to fail for the same reasons. If this is a</para>
        /// <para>concern, check the return value from this function and fall back to writing</para>
        /// <para>to stderr if you can.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_ShowMessageBox</para>
        /// </remarks>
        public static int ShowSimpleMessageBox(uint flags, string title, string message, global::SDL3Sharp.Window window)
        {
            var __arg3 = window is null ? __IntPtr.Zero : window.__Instance;
            var ___ret = __Internal.ShowSimpleMessageBox(flags, title, message, __arg3);
            return ___ret;
        }
    }
}
