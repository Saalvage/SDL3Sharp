// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    public enum TouchDeviceType
    {
        Invalid = -1,
        Direct = 0,
        IndirectAbsolute = 1,
        IndirectRelative = 2
    }

    public unsafe partial class Finger : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24, Pack = 8)]
        public partial struct __Internal
        {
            internal ulong id;
            internal float x;
            internal float y;
            internal float pressure;

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_Finger@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.Finger> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.Finger>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.Finger managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.Finger managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Finger __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Finger(native.ToPointer(), skipVTables);
        }

        internal static Finger __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Finger)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Finger __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Finger(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Finger(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Finger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public Finger()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.Finger.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public Finger(global::SDL3Sharp.Finger _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.Finger.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.Finger.__Internal*) __Instance) = *((global::SDL3Sharp.Finger.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Id
        {
            get
            {
                return ((__Internal*)__Instance)->id;
            }

            set
            {
                ((__Internal*)__Instance)->id = value;
            }
        }

        public float X
        {
            get
            {
                return ((__Internal*)__Instance)->x;
            }

            set
            {
                ((__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((__Internal*)__Instance)->y;
            }

            set
            {
                ((__Internal*)__Instance)->y = value;
            }
        }

        public float Pressure
        {
            get
            {
                return ((__Internal*)__Instance)->pressure;
            }

            set
            {
                ((__Internal*)__Instance)->pressure = value;
            }
        }
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetTouchDevices", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong* GetTouchDevices(int* count);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetTouchDeviceName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTouchDeviceName(ulong touchID);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetTouchDeviceType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SDL3Sharp.TouchDeviceType GetTouchDeviceType(ulong touchID);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetNumTouchFingers", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumTouchFingers(ulong touchID);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetTouchFinger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTouchFinger(ulong touchID, int index);
        }

        /// <summary>Get a list of registered touch devices.</summary>
        /// <param name="count">
        /// <para>a pointer filled in with the number of devices returned, can</para>
        /// <para>be NULL.</para>
        /// </param>
        /// <remarks>
        /// <para>On some platforms SDL first sees the touch device if it was actually used.</para>
        /// <para>Therefore the returned list might be empty, although devices are available.</para>
        /// <para>After using all devices at least once the number will be correct.</para>
        /// <para>This was fixed for Android in SDL 2.0.1.</para>
        /// <para>a 0 terminated array of touch device IDs which should be freed</para>
        /// <para>with SDL_free(), or NULL on error; call SDL_GetError() for more</para>
        /// <para>details.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static ulong* GetTouchDevices(ref int count)
        {
            fixed (int* __count0 = &count)
            {
                var __arg0 = __count0;
                var ___ret = __Internal.GetTouchDevices(__arg0);
                return ___ret;
            }
        }

        /// <summary>Get the touch device name as reported from the driver.</summary>
        /// <param name="touchID">the touch device instance ID.</param>
        /// <remarks>
        /// <para>You do not own the returned string, do not modify or free it.</para>
        /// <para>touch device name, or NULL on error; call SDL_GetError() for more</para>
        /// <para>details.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static string GetTouchDeviceName(ulong touchID)
        {
            var ___ret = __Internal.GetTouchDeviceName(touchID);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Get the type of the given touch device.</summary>
        /// <param name="touchID">the ID of a touch device</param>
        /// <remarks>
        /// <para>touch device type</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static global::SDL3Sharp.TouchDeviceType GetTouchDeviceType(ulong touchID)
        {
            var ___ret = __Internal.GetTouchDeviceType(touchID);
            return ___ret;
        }

        /// <summary>Get the number of active fingers for a given touch device.</summary>
        /// <param name="touchID">the ID of a touch device</param>
        /// <remarks>
        /// <para>the number of active fingers for a given touch device on success</para>
        /// <para>or a negative error code on failure; call SDL_GetError() for more</para>
        /// <para>information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetTouchFinger</para>
        /// </remarks>
        public static int GetNumTouchFingers(ulong touchID)
        {
            var ___ret = __Internal.GetNumTouchFingers(touchID);
            return ___ret;
        }

        /// <summary>Get the finger object for specified touch device ID and finger index.</summary>
        /// <param name="touchID">the ID of the requested touch device</param>
        /// <param name="index">the index of the requested finger</param>
        /// <remarks>
        /// <para>The returned resource is owned by SDL and should not be deallocated.</para>
        /// <para>a pointer to the SDL_Finger object or NULL if no object at the</para>
        /// <para>given ID and index could be found.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static global::SDL3Sharp.Finger GetTouchFinger(ulong touchID, int index)
        {
            var ___ret = __Internal.GetTouchFinger(touchID, index);
            var __result0 = global::SDL3Sharp.Finger.__GetOrCreateInstance(___ret, false);
            return __result0;
        }
    }
}
