// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>Function prototype for the timer callback function.</summary>
    /// <remarks>
    /// <para>The callback function is passed the current timer interval and returns</para>
    /// <para>the next timer interval, in milliseconds. If the returned value is the same as the one</para>
    /// <para>passed in, the periodic alarm continues, otherwise a new alarm is</para>
    /// <para>scheduled. If the callback returns 0, the periodic alarm is cancelled.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint TimerCallback(uint interval, __IntPtr param);

    /// <summary>Definition of the timer ID type.</summary>
    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetTicks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetTicks();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetTicksNS", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetTicksNS();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetPerformanceCounter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetPerformanceCounter();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetPerformanceFrequency", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetPerformanceFrequency();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_Delay", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Delay(uint ms);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_DelayNS", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DelayNS(ulong ns);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_AddTimer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AddTimer(uint interval, __IntPtr callback, __IntPtr param);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_RemoveTimer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool RemoveTimer(uint id);
        }

        /// <summary>Get the number of milliseconds since SDL library initialization.</summary>
        /// <remarks>
        /// <para>an unsigned 64-bit value representing the number of milliseconds</para>
        /// <para>since the SDL library initialized.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static ulong GetTicks()
        {
            var ___ret = __Internal.GetTicks();
            return ___ret;
        }

        /// <summary>Get the number of nanoseconds since SDL library initialization.</summary>
        /// <remarks>
        /// <para>an unsigned 64-bit value representing the number of nanoseconds</para>
        /// <para>since the SDL library initialized.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static ulong GetTicksNS()
        {
            var ___ret = __Internal.GetTicksNS();
            return ___ret;
        }

        /// <summary>Get the current value of the high resolution counter.</summary>
        /// <remarks>
        /// <para>This function is typically used for profiling.</para>
        /// <para>The counter values are only meaningful relative to each other. Differences</para>
        /// <para>between values can be converted to times by using</para>
        /// <para>SDL_GetPerformanceFrequency().</para>
        /// <para>the current counter value.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPerformanceFrequency</para>
        /// </remarks>
        public static ulong GetPerformanceCounter()
        {
            var ___ret = __Internal.GetPerformanceCounter();
            return ___ret;
        }

        /// <summary>Get the count per second of the high resolution counter.</summary>
        /// <remarks>
        /// <para>a platform-specific count per second.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPerformanceCounter</para>
        /// </remarks>
        public static ulong GetPerformanceFrequency()
        {
            var ___ret = __Internal.GetPerformanceFrequency();
            return ___ret;
        }

        /// <summary>Wait a specified number of milliseconds before returning.</summary>
        /// <param name="ms">the number of milliseconds to delay</param>
        /// <remarks>
        /// <para>This function waits a specified number of milliseconds before returning. It</para>
        /// <para>waits at least the specified time, but possibly longer due to OS</para>
        /// <para>scheduling.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static void Delay(uint ms)
        {
            __Internal.Delay(ms);
        }

        /// <summary>Wait a specified number of nanoseconds before returning.</summary>
        /// <param name="ns">the number of nanoseconds to delay</param>
        /// <remarks>
        /// <para>This function waits a specified number of nanoseconds before returning. It</para>
        /// <para>waits at least the specified time, but possibly longer due to OS</para>
        /// <para>scheduling.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static void DelayNS(ulong ns)
        {
            __Internal.DelayNS(ns);
        }

        /// <summary>Call a callback function at a future time.</summary>
        /// <param name="interval">the timer delay, in milliseconds, passed to `callback`</param>
        /// <param name="callback">
        /// <para>the SDL_TimerCallback function to call when the specified</para>
        /// <para>`interval` elapses</para>
        /// </param>
        /// <param name="param">a pointer that is passed to `callback`</param>
        /// <remarks>
        /// <para>If you use this function, you must pass `SDL_INIT_TIMER` to SDL_Init().</para>
        /// <para>The callback function is passed the current timer interval and the user</para>
        /// <para>supplied parameter from the SDL_AddTimer() call and should return the next</para>
        /// <para>timer interval. If the value returned from the callback is 0, the timer is</para>
        /// <para>canceled.</para>
        /// <para>The callback is run on a separate thread.</para>
        /// <para>Timers take into account the amount of time it took to execute the</para>
        /// <para>callback. For example, if the callback took 250 ms to execute and returned</para>
        /// <para>1000 (ms), the timer would only wait another 750 ms before its next</para>
        /// <para>iteration.</para>
        /// <para>Timing may be inexact due to OS scheduling. Be sure to note the current</para>
        /// <para>time with SDL_GetTicksNS() or SDL_GetPerformanceCounter() in case your</para>
        /// <para>callback needs to adjust for variances.</para>
        /// <para>a timer ID or 0 if an error occurs; call SDL_GetError() for more</para>
        /// <para>information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_RemoveTimer</para>
        /// </remarks>
        public static uint AddTimer(uint interval, global::SDL3Sharp.TimerCallback callback, __IntPtr param)
        {
            var __arg1 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var ___ret = __Internal.AddTimer(interval, __arg1, param);
            return ___ret;
        }

        /// <summary>Remove a timer created with SDL_AddTimer().</summary>
        /// <param name="id">the ID of the timer to remove</param>
        /// <remarks>
        /// <para>SDL_TRUE if the timer is removed or SDL_FALSE if the timer wasn't</para>
        /// <para>found.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_AddTimer</para>
        /// </remarks>
        public static bool RemoveTimer(uint id)
        {
            var ___ret = __Internal.RemoveTimer(id);
            return ___ret;
        }
    }
}
