// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>Initialization flags for SDL_Init and/or SDL_InitSubSystem</summary>
    /// <remarks>
    /// <para>These are the flags which may be passed to SDL_Init().  You should</para>
    /// <para>specify the subsystems which you will be using in your application.</para>
    /// <para>SDL_Init</para>
    /// <para>SDL_Quit</para>
    /// <para>SDL_InitSubSystem</para>
    /// <para>SDL_QuitSubSystem</para>
    /// <para>SDL_WasInit</para>
    /// </remarks>
    [Flags]
    public enum InitFlags
    {
        Timer = 1,
        Audio = 16,
        /// <summary>`SDL_INIT_VIDEO` implies `SDL_INIT_EVENTS`</summary>
        Video = 32,
        /// <summary>`SDL_INIT_JOYSTICK` implies `SDL_INIT_EVENTS`</summary>
        Joystick = 512,
        Haptic = 4096,
        /// <summary>`SDL_INIT_GAMEPAD` implies `SDL_INIT_JOYSTICK`</summary>
        Gamepad = 8192,
        Events = 16384,
        Sensor = 32768,
        /// <summary>`SDL_INIT_CAMERA` implies `SDL_INIT_EVENTS`</summary>
        Camera = 65536
    }

    /// <summary>Initialization flags for SDL_Init and/or SDL_InitSubSystem</summary>
    /// <remarks>
    /// <para>These are the flags which may be passed to SDL_Init().  You should</para>
    /// <para>specify the subsystems which you will be using in your application.</para>
    /// <para>SDL_Init</para>
    /// <para>SDL_Quit</para>
    /// <para>SDL_InitSubSystem</para>
    /// <para>SDL_QuitSubSystem</para>
    /// <para>SDL_WasInit</para>
    /// </remarks>
    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_Init", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Init(uint flags);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_InitSubSystem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int InitSubSystem(uint flags);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_QuitSubSystem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void QuitSubSystem(uint flags);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_WasInit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint WasInit(uint flags);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_Quit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Quit();
        }

        /// <summary>Initialize the SDL library.</summary>
        /// <param name="flags">subsystem initialization flags</param>
        /// <remarks>
        /// <para>SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the</para>
        /// <para>two may be used interchangeably. Though for readability of your code</para>
        /// <para>SDL_InitSubSystem() might be preferred.</para>
        /// <para>The file I/O (for example: SDL_RWFromFile) and threading (SDL_CreateThread)</para>
        /// <para>subsystems are initialized by default. Message boxes</para>
        /// <para>(SDL_ShowSimpleMessageBox) also attempt to work without initializing the</para>
        /// <para>video subsystem, in hopes of being useful in showing an error dialog when</para>
        /// <para>SDL_Init fails. You must specifically initialize other subsystems if you</para>
        /// <para>use them in your application.</para>
        /// <para>Logging (such as SDL_Log) works without initialization, too.</para>
        /// <para>`flags` may be any of the following OR'd together:</para>
        /// <para>- `SDL_INIT_TIMER`: timer subsystem</para>
        /// <para>- `SDL_INIT_AUDIO`: audio subsystem</para>
        /// <para>- `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events</para>
        /// <para>subsystem</para>
        /// <para>- `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the</para>
        /// <para>events subsystem</para>
        /// <para>- `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem</para>
        /// <para>- `SDL_INIT_GAMEPAD`: gamepad subsystem; automatically initializes the</para>
        /// <para>joystick subsystem</para>
        /// <para>- `SDL_INIT_EVENTS`: events subsystem</para>
        /// <para>- `SDL_INIT_SENSOR`: sensor subsystem</para>
        /// <para>Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()</para>
        /// <para>for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or</para>
        /// <para>call SDL_Quit() to force shutdown). If a subsystem is already loaded then</para>
        /// <para>this call will increase the ref-count and return.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_InitSubSystem</para>
        /// <para>SDL_Quit</para>
        /// <para>SDL_SetMainReady</para>
        /// <para>SDL_WasInit</para>
        /// </remarks>
        public static int Init(global::SDL3Sharp.InitFlags flags)
        {
            var __arg0 = (uint)flags;
            var ___ret = __Internal.Init(__arg0);
            return ___ret;
        }

        /// <summary>Compatibility function to initialize the SDL library.</summary>
        /// <param name="flags">any of the flags used by SDL_Init(); see SDL_Init for details.</param>
        /// <remarks>
        /// <para>This function and SDL_Init() are interchangeable.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Init</para>
        /// <para>SDL_Quit</para>
        /// <para>SDL_QuitSubSystem</para>
        /// </remarks>
        public static int InitSubSystem(uint flags)
        {
            var ___ret = __Internal.InitSubSystem(flags);
            return ___ret;
        }

        /// <summary>Shut down specific SDL subsystems.</summary>
        /// <param name="flags">any of the flags used by SDL_Init(); see SDL_Init for details.</param>
        /// <remarks>
        /// <para>You still need to call SDL_Quit() even if you close all open subsystems</para>
        /// <para>with SDL_QuitSubSystem().</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_InitSubSystem</para>
        /// <para>SDL_Quit</para>
        /// </remarks>
        public static void QuitSubSystem(uint flags)
        {
            __Internal.QuitSubSystem(flags);
        }

        /// <summary>Get a mask of the specified subsystems which are currently initialized.</summary>
        /// <param name="flags">any of the flags used by SDL_Init(); see SDL_Init for details.</param>
        /// <remarks>
        /// <para>a mask of all initialized subsystems if `flags` is 0, otherwise it</para>
        /// <para>returns the initialization status of the specified subsystems.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Init</para>
        /// <para>SDL_InitSubSystem</para>
        /// </remarks>
        public static uint WasInit(uint flags)
        {
            var ___ret = __Internal.WasInit(flags);
            return ___ret;
        }

        /// <summary>Clean up all initialized subsystems.</summary>
        /// <remarks>
        /// <para>You should call this function even if you have already shutdown each</para>
        /// <para>initialized subsystem with SDL_QuitSubSystem(). It is safe to call this</para>
        /// <para>function even in the case of errors in initialization.</para>
        /// <para>You can use this function with atexit() to ensure that it is run when your</para>
        /// <para>application is shutdown, but it is not wise to do this from a library or</para>
        /// <para>other dynamically loaded code.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Init</para>
        /// <para>SDL_QuitSubSystem</para>
        /// </remarks>
        public static void Quit()
        {
            __Internal.Quit();
        }
    }
}
