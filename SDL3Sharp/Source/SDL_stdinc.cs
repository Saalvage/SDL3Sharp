// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    public enum DUMMY_ENUM
    {
        _0 = 0
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr MallocFunc(ulong size);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr CallocFunc(ulong nmemb, ulong size);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr ReallocFunc(__IntPtr mem, ulong size);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void FreeFunc(__IntPtr mem);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void FunctionPointer();

    public unsafe partial class IconvDataT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.IconvDataT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.IconvDataT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.IconvDataT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.IconvDataT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IconvDataT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IconvDataT(native.ToPointer(), skipVTables);
        }

        internal static IconvDataT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IconvDataT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IconvDataT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IconvDataT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IconvDataT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected IconvDataT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_malloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Malloc(ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_calloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Calloc(ulong nmemb, ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_realloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Realloc(__IntPtr mem, ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_free", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Free(__IntPtr mem);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetOriginalMemoryFunctions", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetOriginalMemoryFunctions(__IntPtr malloc_func, __IntPtr calloc_func, __IntPtr realloc_func, __IntPtr free_func);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetMemoryFunctions", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetMemoryFunctions(__IntPtr malloc_func, __IntPtr calloc_func, __IntPtr realloc_func, __IntPtr free_func);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetMemoryFunctions", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetMemoryFunctions(__IntPtr malloc_func, __IntPtr calloc_func, __IntPtr realloc_func, __IntPtr free_func);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_aligned_alloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr AlignedAlloc(ulong alignment, ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_aligned_free", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AlignedFree(__IntPtr mem);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetNumAllocations", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAllocations();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_getenv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Getenv([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_setenv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Setenv([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string value, int overwrite);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_qsort", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Qsort(__IntPtr @base, ulong nmemb, ulong size, __IntPtr compare);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_bsearch", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Bsearch(__IntPtr key, __IntPtr @base, ulong nmemb, ulong size, __IntPtr compare);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_qsort_r", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void QsortR(__IntPtr @base, ulong nmemb, ulong size, __IntPtr compare, __IntPtr userdata);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_bsearch_r", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr BsearchR(__IntPtr key, __IntPtr @base, ulong nmemb, ulong size, __IntPtr compare, __IntPtr userdata);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_abs", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Abs(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isalpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isalpha(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isalnum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isalnum(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isblank", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isblank(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_iscntrl", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Iscntrl(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isdigit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isdigit(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isxdigit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isxdigit(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ispunct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Ispunct(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isspace", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isspace(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isupper", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isupper(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_islower", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Islower(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isprint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isprint(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_isgraph", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Isgraph(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_toupper", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Toupper(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_tolower", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Tolower(int x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_crc16", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort Crc16(ushort crc, __IntPtr data, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_crc32", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint Crc32(uint crc, __IntPtr data, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_memcpy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Memcpy(__IntPtr dst, __IntPtr src, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_memmove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Memmove(__IntPtr dst, __IntPtr src, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_memset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Memset(__IntPtr dst, int c, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_memset4", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Memset4(__IntPtr dst, uint val, ulong dwords);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_memcmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Memcmp(__IntPtr s1, __IntPtr s2, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcslen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Wcslen([MarshalAs(UnmanagedType.LPWStr)] string wstr);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcsnlen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Wcsnlen([MarshalAs(UnmanagedType.LPWStr)] string wstr, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcslcpy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Wcslcpy(char* dst, [MarshalAs(UnmanagedType.LPWStr)] string src, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcslcat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Wcslcat(char* dst, [MarshalAs(UnmanagedType.LPWStr)] string src, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcsdup", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern char* Wcsdup([MarshalAs(UnmanagedType.LPWStr)] string wstr);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcsstr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern char* Wcsstr([MarshalAs(UnmanagedType.LPWStr)] string haystack, [MarshalAs(UnmanagedType.LPWStr)] string needle);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcsnstr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern char* Wcsnstr([MarshalAs(UnmanagedType.LPWStr)] string haystack, [MarshalAs(UnmanagedType.LPWStr)] string needle, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcscmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Wcscmp([MarshalAs(UnmanagedType.LPWStr)] string str1, [MarshalAs(UnmanagedType.LPWStr)] string str2);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcsncmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Wcsncmp([MarshalAs(UnmanagedType.LPWStr)] string str1, [MarshalAs(UnmanagedType.LPWStr)] string str2, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcscasecmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Wcscasecmp([MarshalAs(UnmanagedType.LPWStr)] string str1, [MarshalAs(UnmanagedType.LPWStr)] string str2);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcsncasecmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Wcsncasecmp([MarshalAs(UnmanagedType.LPWStr)] string str1, [MarshalAs(UnmanagedType.LPWStr)] string str2, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_wcstol", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Wcstol([MarshalAs(UnmanagedType.LPWStr)] string str, char** endp, int @base);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strlen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Strlen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strnlen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Strnlen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strlcpy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Strlcpy(sbyte* dst, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string src, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_utf8strlcpy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Utf8strlcpy(sbyte* dst, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string src, ulong dst_bytes);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strlcat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Strlcat(sbyte* dst, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string src, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strdup", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strdup([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strndup", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strndup([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strrev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strrev(sbyte* str);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strupr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strupr(sbyte* str);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strlwr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strlwr(sbyte* str);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strchr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strchr([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, int c);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strrchr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strrchr([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, int c);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strstr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strstr([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string haystack, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string needle);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strnstr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strnstr([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string haystack, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string needle, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strcasestr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Strcasestr([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string haystack, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string needle);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strtok_r", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* StrtokR(sbyte* s1, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s2, sbyte** saveptr);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_utf8strlen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Utf8strlen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_utf8strnlen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Utf8strnlen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, ulong bytes);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_itoa", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Itoa(int value, sbyte* str, int radix);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_uitoa", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Uitoa(uint value, sbyte* str, int radix);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ltoa", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Ltoa(int value, sbyte* str, int radix);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ultoa", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Ultoa(uint value, sbyte* str, int radix);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_lltoa", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Lltoa(long value, sbyte* str, int radix);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ulltoa", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Ulltoa(ulong value, sbyte* str, int radix);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_atoi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Atoi([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_atof", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Atof([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strtol", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Strtol([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, sbyte** endp, int @base);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strtoul", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint Strtoul([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, sbyte** endp, int @base);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strtoll", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long Strtoll([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, sbyte** endp, int @base);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strtoull", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Strtoull([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, sbyte** endp, int @base);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strtod", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Strtod([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, sbyte** endp);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strcmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Strcmp([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str1, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str2);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strncmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Strncmp([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str1, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str2, ulong maxlen);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strcasecmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Strcasecmp([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str1, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str2);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_strncasecmp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Strncasecmp([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str1, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str2, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_sscanf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Sscanf([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_snprintf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Snprintf(sbyte* text, ulong maxlen, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_swprintf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Swprintf(char* text, ulong maxlen, [MarshalAs(UnmanagedType.LPWStr)] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_asprintf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Asprintf(sbyte** strp, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_acos", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Acos(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_acosf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Acosf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_asin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Asin(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_asinf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Asinf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_atan", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Atan(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_atanf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Atanf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_atan2", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Atan2(double y, double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_atan2f", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Atan2f(float y, float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ceil", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Ceil(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ceilf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Ceilf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_copysign", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Copysign(double x, double y);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_copysignf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Copysignf(float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_cos", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Cos(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_cosf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Cosf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_exp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Exp(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_expf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Expf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_fabs", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Fabs(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_fabsf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Fabsf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_floor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Floor(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_floorf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Floorf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_trunc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Trunc(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_truncf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Truncf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_fmod", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Fmod(double x, double y);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_fmodf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Fmodf(float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_log", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Log(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_logf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Logf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_log10", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Log10(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_log10f", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Log10f(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_modf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Modf(double x, double* y);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_modff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Modff(float x, float* y);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_pow", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Pow(double x, double y);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_powf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Powf(float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_round", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Round(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_roundf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Roundf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_lround", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Lround(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_lroundf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Lroundf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_scalbn", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Scalbn(double x, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_scalbnf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Scalbnf(float x, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_sin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Sin(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_sinf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Sinf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_sqrt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Sqrt(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_sqrtf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Sqrtf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_tan", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double Tan(double x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_tanf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float Tanf(float x);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_iconv_open", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IconvOpen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tocode, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fromcode);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_iconv_close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IconvClose(__IntPtr cd);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_iconv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Iconv(__IntPtr cd, sbyte** inbuf, ulong* inbytesleft, sbyte** outbuf, ulong* outbytesleft);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_iconv_string", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* IconvString([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tocode, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fromcode, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string inbuf, ulong inbytesleft);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_size_mul_overflow", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SizeMulOverflow(ulong a, ulong b, ulong* ret);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_size_mul_overflow_builtin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SizeMulOverflowBuiltin(ulong a, ulong b, ulong* ret);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_size_add_overflow", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SizeAddOverflow(ulong a, ulong b, ulong* ret);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_size_add_overflow_builtin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SizeAddOverflowBuiltin(ulong a, ulong b, ulong* ret);
        }

        public static __IntPtr Malloc(ulong size)
        {
            var ___ret = __Internal.Malloc(size);
            return ___ret;
        }

        public static __IntPtr Calloc(ulong nmemb, ulong size)
        {
            var ___ret = __Internal.Calloc(nmemb, size);
            return ___ret;
        }

        public static __IntPtr Realloc(__IntPtr mem, ulong size)
        {
            var ___ret = __Internal.Realloc(mem, size);
            return ___ret;
        }

        public static void Free(__IntPtr mem)
        {
            __Internal.Free(mem);
        }

        /// <summary>Get the original set of SDL memory functions</summary>
        /// <param name="malloc_func">filled with malloc function</param>
        /// <param name="calloc_func">filled with calloc function</param>
        /// <param name="realloc_func">filled with realloc function</param>
        /// <param name="free_func">filled with free function</param>
        /// <remarks>This function is available since SDL 3.0.0.</remarks>
        public static void GetOriginalMemoryFunctions(global::SDL3Sharp.MallocFunc malloc_func, global::SDL3Sharp.CallocFunc calloc_func, global::SDL3Sharp.ReallocFunc realloc_func, global::SDL3Sharp.FreeFunc free_func)
        {
            var __arg0 = malloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(malloc_func);
            var __arg1 = calloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(calloc_func);
            var __arg2 = realloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(realloc_func);
            var __arg3 = free_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_func);
            __Internal.GetOriginalMemoryFunctions(__arg0, __arg1, __arg2, __arg3);
        }

        /// <summary>Get the current set of SDL memory functions</summary>
        /// <param name="malloc_func">filled with malloc function</param>
        /// <param name="calloc_func">filled with calloc function</param>
        /// <param name="realloc_func">filled with realloc function</param>
        /// <param name="free_func">filled with free function</param>
        /// <remarks>This function is available since SDL 3.0.0.</remarks>
        public static void GetMemoryFunctions(global::SDL3Sharp.MallocFunc malloc_func, global::SDL3Sharp.CallocFunc calloc_func, global::SDL3Sharp.ReallocFunc realloc_func, global::SDL3Sharp.FreeFunc free_func)
        {
            var __arg0 = malloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(malloc_func);
            var __arg1 = calloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(calloc_func);
            var __arg2 = realloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(realloc_func);
            var __arg3 = free_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_func);
            __Internal.GetMemoryFunctions(__arg0, __arg1, __arg2, __arg3);
        }

        /// <summary>Replace SDL's memory allocation functions with a custom set</summary>
        /// <param name="malloc_func">custom malloc function</param>
        /// <param name="calloc_func">custom calloc function</param>
        /// <param name="realloc_func">custom realloc function</param>
        /// <param name="free_func">custom free function</param>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int SetMemoryFunctions(global::SDL3Sharp.MallocFunc malloc_func, global::SDL3Sharp.CallocFunc calloc_func, global::SDL3Sharp.ReallocFunc realloc_func, global::SDL3Sharp.FreeFunc free_func)
        {
            var __arg0 = malloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(malloc_func);
            var __arg1 = calloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(calloc_func);
            var __arg2 = realloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(realloc_func);
            var __arg3 = free_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_func);
            var ___ret = __Internal.SetMemoryFunctions(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>Allocate memory aligned to a specific value</summary>
        /// <param name="alignment">the alignment requested</param>
        /// <param name="size">the size to allocate</param>
        /// <remarks>
        /// <para>If `alignment` is less than the size of `void *`, then it will be increased</para>
        /// <para>to match that.</para>
        /// <para>The returned memory address will be a multiple of the alignment value, and</para>
        /// <para>the amount of memory allocated will be a multiple of the alignment value.</para>
        /// <para>The memory returned by this function must be freed with SDL_aligned_free()</para>
        /// <para>a pointer to the aligned memory</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_aligned_free</para>
        /// </remarks>
        public static __IntPtr AlignedAlloc(ulong alignment, ulong size)
        {
            var ___ret = __Internal.AlignedAlloc(alignment, size);
            return ___ret;
        }

        /// <summary>Free memory allocated by SDL_aligned_alloc()</summary>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_aligned_alloc</para>
        /// </remarks>
        public static void AlignedFree(__IntPtr mem)
        {
            __Internal.AlignedFree(mem);
        }

        /// <summary>Get the number of outstanding (unfreed) allocations</summary>
        /// <remarks>
        /// <para>the number of allocations</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int GetNumAllocations()
        {
            var ___ret = __Internal.GetNumAllocations();
            return ___ret;
        }

        public static sbyte* Getenv(string name)
        {
            var ___ret = __Internal.Getenv(name);
            return ___ret;
        }

        public static int Setenv(string name, string value, int overwrite)
        {
            var ___ret = __Internal.Setenv(name, value, overwrite);
            return ___ret;
        }

        public static void Qsort(__IntPtr @base, ulong nmemb, ulong size, global::SDL3Sharp.Delegates.Func_int___IntPtr___IntPtr compare)
        {
            var __arg3 = compare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(compare);
            __Internal.Qsort(@base, nmemb, size, __arg3);
        }

        public static __IntPtr Bsearch(__IntPtr key, __IntPtr @base, ulong nmemb, ulong size, global::SDL3Sharp.Delegates.Func_int___IntPtr___IntPtr compare)
        {
            var __arg4 = compare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(compare);
            var ___ret = __Internal.Bsearch(key, @base, nmemb, size, __arg4);
            return ___ret;
        }

        public static void QsortR(__IntPtr @base, ulong nmemb, ulong size, global::SDL3Sharp.Delegates.Func_int___IntPtr___IntPtr___IntPtr compare, __IntPtr userdata)
        {
            var __arg3 = compare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(compare);
            __Internal.QsortR(@base, nmemb, size, __arg3, userdata);
        }

        public static __IntPtr BsearchR(__IntPtr key, __IntPtr @base, ulong nmemb, ulong size, global::SDL3Sharp.Delegates.Func_int___IntPtr___IntPtr___IntPtr compare, __IntPtr userdata)
        {
            var __arg4 = compare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(compare);
            var ___ret = __Internal.BsearchR(key, @base, nmemb, size, __arg4, userdata);
            return ___ret;
        }

        public static int Abs(int x)
        {
            var ___ret = __Internal.Abs(x);
            return ___ret;
        }

        public static int Isalpha(int x)
        {
            var ___ret = __Internal.Isalpha(x);
            return ___ret;
        }

        public static int Isalnum(int x)
        {
            var ___ret = __Internal.Isalnum(x);
            return ___ret;
        }

        public static int Isblank(int x)
        {
            var ___ret = __Internal.Isblank(x);
            return ___ret;
        }

        public static int Iscntrl(int x)
        {
            var ___ret = __Internal.Iscntrl(x);
            return ___ret;
        }

        public static int Isdigit(int x)
        {
            var ___ret = __Internal.Isdigit(x);
            return ___ret;
        }

        public static int Isxdigit(int x)
        {
            var ___ret = __Internal.Isxdigit(x);
            return ___ret;
        }

        public static int Ispunct(int x)
        {
            var ___ret = __Internal.Ispunct(x);
            return ___ret;
        }

        public static int Isspace(int x)
        {
            var ___ret = __Internal.Isspace(x);
            return ___ret;
        }

        public static int Isupper(int x)
        {
            var ___ret = __Internal.Isupper(x);
            return ___ret;
        }

        public static int Islower(int x)
        {
            var ___ret = __Internal.Islower(x);
            return ___ret;
        }

        public static int Isprint(int x)
        {
            var ___ret = __Internal.Isprint(x);
            return ___ret;
        }

        public static int Isgraph(int x)
        {
            var ___ret = __Internal.Isgraph(x);
            return ___ret;
        }

        public static int Toupper(int x)
        {
            var ___ret = __Internal.Toupper(x);
            return ___ret;
        }

        public static int Tolower(int x)
        {
            var ___ret = __Internal.Tolower(x);
            return ___ret;
        }

        public static ushort Crc16(ushort crc, __IntPtr data, ulong len)
        {
            var ___ret = __Internal.Crc16(crc, data, len);
            return ___ret;
        }

        public static uint Crc32(uint crc, __IntPtr data, ulong len)
        {
            var ___ret = __Internal.Crc32(crc, data, len);
            return ___ret;
        }

        public static __IntPtr Memcpy(__IntPtr dst, __IntPtr src, ulong len)
        {
            var ___ret = __Internal.Memcpy(dst, src, len);
            return ___ret;
        }

        public static __IntPtr Memmove(__IntPtr dst, __IntPtr src, ulong len)
        {
            var ___ret = __Internal.Memmove(dst, src, len);
            return ___ret;
        }

        public static __IntPtr Memset(__IntPtr dst, int c, ulong len)
        {
            var ___ret = __Internal.Memset(dst, c, len);
            return ___ret;
        }

        public static __IntPtr Memset4(__IntPtr dst, uint val, ulong dwords)
        {
            var ___ret = __Internal.Memset4(dst, val, dwords);
            return ___ret;
        }

        public static int Memcmp(__IntPtr s1, __IntPtr s2, ulong len)
        {
            var ___ret = __Internal.Memcmp(s1, s2, len);
            return ___ret;
        }

        public static ulong Wcslen(string wstr)
        {
            var ___ret = __Internal.Wcslen(wstr);
            return ___ret;
        }

        public static ulong Wcsnlen(string wstr, ulong maxlen)
        {
            var ___ret = __Internal.Wcsnlen(wstr, maxlen);
            return ___ret;
        }

        public static ulong Wcslcpy(char* dst, string src, ulong maxlen)
        {
            var ___ret = __Internal.Wcslcpy(dst, src, maxlen);
            return ___ret;
        }

        public static ulong Wcslcat(char* dst, string src, ulong maxlen)
        {
            var ___ret = __Internal.Wcslcat(dst, src, maxlen);
            return ___ret;
        }

        public static char* Wcsdup(string wstr)
        {
            var ___ret = __Internal.Wcsdup(wstr);
            return ___ret;
        }

        public static char* Wcsstr(string haystack, string needle)
        {
            var ___ret = __Internal.Wcsstr(haystack, needle);
            return ___ret;
        }

        public static char* Wcsnstr(string haystack, string needle, ulong maxlen)
        {
            var ___ret = __Internal.Wcsnstr(haystack, needle, maxlen);
            return ___ret;
        }

        public static int Wcscmp(string str1, string str2)
        {
            var ___ret = __Internal.Wcscmp(str1, str2);
            return ___ret;
        }

        public static int Wcsncmp(string str1, string str2, ulong maxlen)
        {
            var ___ret = __Internal.Wcsncmp(str1, str2, maxlen);
            return ___ret;
        }

        public static int Wcscasecmp(string str1, string str2)
        {
            var ___ret = __Internal.Wcscasecmp(str1, str2);
            return ___ret;
        }

        public static int Wcsncasecmp(string str1, string str2, ulong len)
        {
            var ___ret = __Internal.Wcsncasecmp(str1, str2, len);
            return ___ret;
        }

        public static int Wcstol(string str, char** endp, int @base)
        {
            var ___ret = __Internal.Wcstol(str, endp, @base);
            return ___ret;
        }

        public static ulong Strlen(string str)
        {
            var ___ret = __Internal.Strlen(str);
            return ___ret;
        }

        public static ulong Strnlen(string str, ulong maxlen)
        {
            var ___ret = __Internal.Strnlen(str, maxlen);
            return ___ret;
        }

        public static ulong Strlcpy(sbyte* dst, string src, ulong maxlen)
        {
            var ___ret = __Internal.Strlcpy(dst, src, maxlen);
            return ___ret;
        }

        public static ulong Utf8strlcpy(sbyte* dst, string src, ulong dst_bytes)
        {
            var ___ret = __Internal.Utf8strlcpy(dst, src, dst_bytes);
            return ___ret;
        }

        public static ulong Strlcat(sbyte* dst, string src, ulong maxlen)
        {
            var ___ret = __Internal.Strlcat(dst, src, maxlen);
            return ___ret;
        }

        public static sbyte* Strdup(string str)
        {
            var ___ret = __Internal.Strdup(str);
            return ___ret;
        }

        public static sbyte* Strndup(string str, ulong maxlen)
        {
            var ___ret = __Internal.Strndup(str, maxlen);
            return ___ret;
        }

        public static sbyte* Strrev(sbyte* str)
        {
            var ___ret = __Internal.Strrev(str);
            return ___ret;
        }

        public static sbyte* Strupr(sbyte* str)
        {
            var ___ret = __Internal.Strupr(str);
            return ___ret;
        }

        public static sbyte* Strlwr(sbyte* str)
        {
            var ___ret = __Internal.Strlwr(str);
            return ___ret;
        }

        public static sbyte* Strchr(string str, int c)
        {
            var ___ret = __Internal.Strchr(str, c);
            return ___ret;
        }

        public static sbyte* Strrchr(string str, int c)
        {
            var ___ret = __Internal.Strrchr(str, c);
            return ___ret;
        }

        public static sbyte* Strstr(string haystack, string needle)
        {
            var ___ret = __Internal.Strstr(haystack, needle);
            return ___ret;
        }

        public static sbyte* Strnstr(string haystack, string needle, ulong maxlen)
        {
            var ___ret = __Internal.Strnstr(haystack, needle, maxlen);
            return ___ret;
        }

        public static sbyte* Strcasestr(string haystack, string needle)
        {
            var ___ret = __Internal.Strcasestr(haystack, needle);
            return ___ret;
        }

        public static sbyte* StrtokR(sbyte* s1, string s2, sbyte** saveptr)
        {
            var ___ret = __Internal.StrtokR(s1, s2, saveptr);
            return ___ret;
        }

        public static ulong Utf8strlen(string str)
        {
            var ___ret = __Internal.Utf8strlen(str);
            return ___ret;
        }

        public static ulong Utf8strnlen(string str, ulong bytes)
        {
            var ___ret = __Internal.Utf8strnlen(str, bytes);
            return ___ret;
        }

        public static sbyte* Itoa(int value, sbyte* str, int radix)
        {
            var ___ret = __Internal.Itoa(value, str, radix);
            return ___ret;
        }

        public static sbyte* Uitoa(uint value, sbyte* str, int radix)
        {
            var ___ret = __Internal.Uitoa(value, str, radix);
            return ___ret;
        }

        public static sbyte* Ltoa(int value, sbyte* str, int radix)
        {
            var ___ret = __Internal.Ltoa(value, str, radix);
            return ___ret;
        }

        public static sbyte* Ultoa(uint value, sbyte* str, int radix)
        {
            var ___ret = __Internal.Ultoa(value, str, radix);
            return ___ret;
        }

        public static sbyte* Lltoa(long value, sbyte* str, int radix)
        {
            var ___ret = __Internal.Lltoa(value, str, radix);
            return ___ret;
        }

        public static sbyte* Ulltoa(ulong value, sbyte* str, int radix)
        {
            var ___ret = __Internal.Ulltoa(value, str, radix);
            return ___ret;
        }

        public static int Atoi(string str)
        {
            var ___ret = __Internal.Atoi(str);
            return ___ret;
        }

        public static double Atof(string str)
        {
            var ___ret = __Internal.Atof(str);
            return ___ret;
        }

        public static int Strtol(string str, sbyte** endp, int @base)
        {
            var ___ret = __Internal.Strtol(str, endp, @base);
            return ___ret;
        }

        public static uint Strtoul(string str, sbyte** endp, int @base)
        {
            var ___ret = __Internal.Strtoul(str, endp, @base);
            return ___ret;
        }

        public static long Strtoll(string str, sbyte** endp, int @base)
        {
            var ___ret = __Internal.Strtoll(str, endp, @base);
            return ___ret;
        }

        public static ulong Strtoull(string str, sbyte** endp, int @base)
        {
            var ___ret = __Internal.Strtoull(str, endp, @base);
            return ___ret;
        }

        public static double Strtod(string str, sbyte** endp)
        {
            var ___ret = __Internal.Strtod(str, endp);
            return ___ret;
        }

        public static int Strcmp(string str1, string str2)
        {
            var ___ret = __Internal.Strcmp(str1, str2);
            return ___ret;
        }

        public static int Strncmp(string str1, string str2, ulong maxlen)
        {
            var ___ret = __Internal.Strncmp(str1, str2, maxlen);
            return ___ret;
        }

        public static int Strcasecmp(string str1, string str2)
        {
            var ___ret = __Internal.Strcasecmp(str1, str2);
            return ___ret;
        }

        public static int Strncasecmp(string str1, string str2, ulong len)
        {
            var ___ret = __Internal.Strncasecmp(str1, str2, len);
            return ___ret;
        }

        public static int Sscanf(string text, string fmt)
        {
            var ___ret = __Internal.Sscanf(text, fmt);
            return ___ret;
        }

        public static int Snprintf(sbyte* text, ulong maxlen, string fmt)
        {
            var ___ret = __Internal.Snprintf(text, maxlen, fmt);
            return ___ret;
        }

        public static int Swprintf(char* text, ulong maxlen, string fmt)
        {
            var ___ret = __Internal.Swprintf(text, maxlen, fmt);
            return ___ret;
        }

        public static int Asprintf(sbyte** strp, string fmt)
        {
            var ___ret = __Internal.Asprintf(strp, fmt);
            return ___ret;
        }

        /// <summary>Use this function to compute arc cosine of `x`.</summary>
        /// <param name="x">floating point value, in radians.</param>
        /// <remarks>
        /// <para>The definition of `y = acos(x)` is `x = cos(y)`.</para>
        /// <para>Domain: `-1&lt;&gt;= x&lt;&gt;= 1`</para>
        /// <para>Range: `0&lt;&gt;= y&lt;&gt;= Pi`</para>
        /// <para>arc cosine of `x`.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static double Acos(double x)
        {
            var ___ret = __Internal.Acos(x);
            return ___ret;
        }

        public static float Acosf(float x)
        {
            var ___ret = __Internal.Acosf(x);
            return ___ret;
        }

        public static double Asin(double x)
        {
            var ___ret = __Internal.Asin(x);
            return ___ret;
        }

        public static float Asinf(float x)
        {
            var ___ret = __Internal.Asinf(x);
            return ___ret;
        }

        public static double Atan(double x)
        {
            var ___ret = __Internal.Atan(x);
            return ___ret;
        }

        public static float Atanf(float x)
        {
            var ___ret = __Internal.Atanf(x);
            return ___ret;
        }

        public static double Atan2(double y, double x)
        {
            var ___ret = __Internal.Atan2(y, x);
            return ___ret;
        }

        public static float Atan2f(float y, float x)
        {
            var ___ret = __Internal.Atan2f(y, x);
            return ___ret;
        }

        public static double Ceil(double x)
        {
            var ___ret = __Internal.Ceil(x);
            return ___ret;
        }

        public static float Ceilf(float x)
        {
            var ___ret = __Internal.Ceilf(x);
            return ___ret;
        }

        public static double Copysign(double x, double y)
        {
            var ___ret = __Internal.Copysign(x, y);
            return ___ret;
        }

        public static float Copysignf(float x, float y)
        {
            var ___ret = __Internal.Copysignf(x, y);
            return ___ret;
        }

        public static double Cos(double x)
        {
            var ___ret = __Internal.Cos(x);
            return ___ret;
        }

        public static float Cosf(float x)
        {
            var ___ret = __Internal.Cosf(x);
            return ___ret;
        }

        public static double Exp(double x)
        {
            var ___ret = __Internal.Exp(x);
            return ___ret;
        }

        public static float Expf(float x)
        {
            var ___ret = __Internal.Expf(x);
            return ___ret;
        }

        public static double Fabs(double x)
        {
            var ___ret = __Internal.Fabs(x);
            return ___ret;
        }

        public static float Fabsf(float x)
        {
            var ___ret = __Internal.Fabsf(x);
            return ___ret;
        }

        public static double Floor(double x)
        {
            var ___ret = __Internal.Floor(x);
            return ___ret;
        }

        public static float Floorf(float x)
        {
            var ___ret = __Internal.Floorf(x);
            return ___ret;
        }

        public static double Trunc(double x)
        {
            var ___ret = __Internal.Trunc(x);
            return ___ret;
        }

        public static float Truncf(float x)
        {
            var ___ret = __Internal.Truncf(x);
            return ___ret;
        }

        public static double Fmod(double x, double y)
        {
            var ___ret = __Internal.Fmod(x, y);
            return ___ret;
        }

        public static float Fmodf(float x, float y)
        {
            var ___ret = __Internal.Fmodf(x, y);
            return ___ret;
        }

        public static double Log(double x)
        {
            var ___ret = __Internal.Log(x);
            return ___ret;
        }

        public static float Logf(float x)
        {
            var ___ret = __Internal.Logf(x);
            return ___ret;
        }

        public static double Log10(double x)
        {
            var ___ret = __Internal.Log10(x);
            return ___ret;
        }

        public static float Log10f(float x)
        {
            var ___ret = __Internal.Log10f(x);
            return ___ret;
        }

        public static double Modf(double x, ref double y)
        {
            fixed (double* __y1 = &y)
            {
                var __arg1 = __y1;
                var ___ret = __Internal.Modf(x, __arg1);
                return ___ret;
            }
        }

        public static float Modff(float x, ref float y)
        {
            fixed (float* __y1 = &y)
            {
                var __arg1 = __y1;
                var ___ret = __Internal.Modff(x, __arg1);
                return ___ret;
            }
        }

        public static double Pow(double x, double y)
        {
            var ___ret = __Internal.Pow(x, y);
            return ___ret;
        }

        public static float Powf(float x, float y)
        {
            var ___ret = __Internal.Powf(x, y);
            return ___ret;
        }

        public static double Round(double x)
        {
            var ___ret = __Internal.Round(x);
            return ___ret;
        }

        public static float Roundf(float x)
        {
            var ___ret = __Internal.Roundf(x);
            return ___ret;
        }

        public static int Lround(double x)
        {
            var ___ret = __Internal.Lround(x);
            return ___ret;
        }

        public static int Lroundf(float x)
        {
            var ___ret = __Internal.Lroundf(x);
            return ___ret;
        }

        public static double Scalbn(double x, int n)
        {
            var ___ret = __Internal.Scalbn(x, n);
            return ___ret;
        }

        public static float Scalbnf(float x, int n)
        {
            var ___ret = __Internal.Scalbnf(x, n);
            return ___ret;
        }

        public static double Sin(double x)
        {
            var ___ret = __Internal.Sin(x);
            return ___ret;
        }

        public static float Sinf(float x)
        {
            var ___ret = __Internal.Sinf(x);
            return ___ret;
        }

        public static double Sqrt(double x)
        {
            var ___ret = __Internal.Sqrt(x);
            return ___ret;
        }

        public static float Sqrtf(float x)
        {
            var ___ret = __Internal.Sqrtf(x);
            return ___ret;
        }

        public static double Tan(double x)
        {
            var ___ret = __Internal.Tan(x);
            return ___ret;
        }

        public static float Tanf(float x)
        {
            var ___ret = __Internal.Tanf(x);
            return ___ret;
        }

        public static global::SDL3Sharp.IconvDataT IconvOpen(string tocode, string fromcode)
        {
            var ___ret = __Internal.IconvOpen(tocode, fromcode);
            var __result0 = global::SDL3Sharp.IconvDataT.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static int IconvClose(global::SDL3Sharp.IconvDataT cd)
        {
            var __arg0 = cd is null ? __IntPtr.Zero : cd.__Instance;
            var ___ret = __Internal.IconvClose(__arg0);
            return ___ret;
        }

        public static ulong Iconv(global::SDL3Sharp.IconvDataT cd, sbyte** inbuf, ref ulong inbytesleft, sbyte** outbuf, ref ulong outbytesleft)
        {
            var __arg0 = cd is null ? __IntPtr.Zero : cd.__Instance;
            fixed (ulong* __inbytesleft2 = &inbytesleft)
            {
                var __arg2 = __inbytesleft2;
                fixed (ulong* __outbytesleft4 = &outbytesleft)
                {
                    var __arg4 = __outbytesleft4;
                    var ___ret = __Internal.Iconv(__arg0, inbuf, __arg2, outbuf, __arg4);
                    return ___ret;
                }
            }
        }

        /// <summary>
        /// <para>This function converts a buffer or string between encodings in one pass,</para>
        /// <para>returning a string that must be freed with SDL_free() or NULL on error.</para>
        /// </summary>
        /// <remarks>This function is available since SDL 3.0.0.</remarks>
        public static sbyte* IconvString(string tocode, string fromcode, string inbuf, ulong inbytesleft)
        {
            var ___ret = __Internal.IconvString(tocode, fromcode, inbuf, inbytesleft);
            return ___ret;
        }

        /// <summary>
        /// <para>If a * b would overflow, return -1. Otherwise store a * b via ret</para>
        /// <para>and return 0.</para>
        /// </summary>
        /// <remarks>This function is available since SDL 3.0.0.</remarks>
        public static int SizeMulOverflow(ulong a, ulong b, ref ulong ret)
        {
            fixed (ulong* __ret2 = &ret)
            {
                var __arg2 = __ret2;
                var ___ret = __Internal.SizeMulOverflow(a, b, __arg2);
                return ___ret;
            }
        }

        public static int SizeMulOverflowBuiltin(ulong a, ulong b, ref ulong ret)
        {
            fixed (ulong* __ret2 = &ret)
            {
                var __arg2 = __ret2;
                var ___ret = __Internal.SizeMulOverflowBuiltin(a, b, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>If a + b would overflow, return -1. Otherwise store a + b via ret</para>
        /// <para>and return 0.</para>
        /// </summary>
        /// <remarks>This function is available since SDL 3.0.0.</remarks>
        public static int SizeAddOverflow(ulong a, ulong b, ref ulong ret)
        {
            fixed (ulong* __ret2 = &ret)
            {
                var __arg2 = __ret2;
                var ___ret = __Internal.SizeAddOverflow(a, b, __arg2);
                return ___ret;
            }
        }

        public static int SizeAddOverflowBuiltin(ulong a, ulong b, ref ulong ret)
        {
            fixed (ulong* __ret2 = &ret)
            {
                var __arg2 = __ret2;
                var ___ret = __Internal.SizeAddOverflowBuiltin(a, b, __arg2);
                return ___ret;
            }
        }
    }
}
