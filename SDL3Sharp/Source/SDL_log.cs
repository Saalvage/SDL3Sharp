// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>The predefined log categories</summary>
    /// <remarks>
    /// <para>By default the application category is enabled at the INFO level,</para>
    /// <para>the assert category is enabled at the WARN level, test is enabled</para>
    /// <para>at the VERBOSE level and all other categories are enabled at the</para>
    /// <para>ERROR level.</para>
    /// </remarks>
    public enum LogCategory
    {
        Application = 0,
        Error = 1,
        Assert = 2,
        System = 3,
        Audio = 4,
        Video = 5,
        Render = 6,
        Input = 7,
        Test = 8,
        Reserved1 = 9,
        Reserved2 = 10,
        Reserved3 = 11,
        Reserved4 = 12,
        Reserved5 = 13,
        Reserved6 = 14,
        Reserved7 = 15,
        Reserved8 = 16,
        Reserved9 = 17,
        Reserved10 = 18,
        Custom = 19
    }

    /// <summary>The predefined log priorities</summary>
    public enum LogPriority
    {
        LogPriorityVerbose = 1,
        LogPriorityDebug = 2,
        LogPriorityInfo = 3,
        LogPriorityWarn = 4,
        LogPriorityError = 5,
        LogPriorityCritical = 6,
        NumLogPriorities = 7
    }

    /// <summary>The predefined log categories</summary>
    /// <remarks>
    /// <para>By default the application category is enabled at the INFO level,</para>
    /// <para>the assert category is enabled at the WARN level, test is enabled</para>
    /// <para>at the VERBOSE level and all other categories are enabled at the</para>
    /// <para>ERROR level.</para>
    /// </remarks>
    /// <summary>The predefined log priorities</summary>
    /// <summary>The prototype for the log output callback function.</summary>
    /// <param name="userdata">what was passed as `userdata` to SDL_LogSetOutputFunction()</param>
    /// <param name="category">the category of the message</param>
    /// <param name="priority">the priority of the message</param>
    /// <param name="message">the message being output</param>
    /// <remarks>This function is called by SDL when there is new text to be logged.</remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void LogOutputFunction(__IntPtr userdata, int category, global::SDL3Sharp.LogPriority priority, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogSetAllPriority", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogSetAllPriority(global::SDL3Sharp.LogPriority priority);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogSetPriority", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogSetPriority(int category, global::SDL3Sharp.LogPriority priority);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogGetPriority", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SDL3Sharp.LogPriority LogGetPriority(int category);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogResetPriorities", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogResetPriorities();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_Log", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Log([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogVerbose", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogVerbose(int category, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogDebug", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogDebug(int category, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogInfo(int category, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogWarn", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogWarn(int category, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogError(int category, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogCritical", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogCritical(int category, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogMessage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogMessage(int category, global::SDL3Sharp.LogPriority priority, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogGetOutputFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogGetOutputFunction(__IntPtr callback, __IntPtr* userdata);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LogSetOutputFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LogSetOutputFunction(__IntPtr callback, __IntPtr userdata);
        }

        /// <summary>Set the priority of all log categories.</summary>
        /// <param name="priority">the SDL_LogPriority to assign</param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LogSetPriority</para>
        /// </remarks>
        public static void LogSetAllPriority(global::SDL3Sharp.LogPriority priority)
        {
            __Internal.LogSetAllPriority(priority);
        }

        /// <summary>Set the priority of a particular log category.</summary>
        /// <param name="category">the category to assign a priority to</param>
        /// <param name="priority">the SDL_LogPriority to assign</param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LogGetPriority</para>
        /// <para>SDL_LogSetAllPriority</para>
        /// </remarks>
        public static void LogSetPriority(int category, global::SDL3Sharp.LogPriority priority)
        {
            __Internal.LogSetPriority(category, priority);
        }

        /// <summary>Get the priority of a particular log category.</summary>
        /// <param name="category">the category to query</param>
        /// <remarks>
        /// <para>the SDL_LogPriority for the requested category</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LogSetPriority</para>
        /// </remarks>
        public static global::SDL3Sharp.LogPriority LogGetPriority(int category)
        {
            var ___ret = __Internal.LogGetPriority(category);
            return ___ret;
        }

        /// <summary>Reset all priorities to default.</summary>
        /// <remarks>
        /// <para>This is called by SDL_Quit().</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LogSetAllPriority</para>
        /// <para>SDL_LogSetPriority</para>
        /// </remarks>
        public static void LogResetPriorities()
        {
            __Internal.LogResetPriorities();
        }

        /// <summary>Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.</summary>
        /// <param name="fmt">a printf() style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the `fmt` string, if</para>
        /// <para>any</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LogCritical</para>
        /// <para>SDL_LogDebug</para>
        /// <para>SDL_LogError</para>
        /// <para>SDL_LogInfo</para>
        /// <para>SDL_LogMessage</para>
        /// <para>SDL_LogMessageV</para>
        /// <para>SDL_LogVerbose</para>
        /// <para>SDL_LogWarn</para>
        /// </remarks>
        public static void Log(string fmt)
        {
            __Internal.Log(fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_VERBOSE.</summary>
        /// <param name="category">the category of the message</param>
        /// <param name="fmt">a printf() style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the **fmt** string,</para>
        /// <para>if any</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Log</para>
        /// <para>SDL_LogCritical</para>
        /// <para>SDL_LogDebug</para>
        /// <para>SDL_LogError</para>
        /// <para>SDL_LogInfo</para>
        /// <para>SDL_LogMessage</para>
        /// <para>SDL_LogMessageV</para>
        /// <para>SDL_LogWarn</para>
        /// </remarks>
        public static void LogVerbose(int category, string fmt)
        {
            __Internal.LogVerbose(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_DEBUG.</summary>
        /// <param name="category">the category of the message</param>
        /// <param name="fmt">a printf() style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the **fmt** string,</para>
        /// <para>if any</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Log</para>
        /// <para>SDL_LogCritical</para>
        /// <para>SDL_LogError</para>
        /// <para>SDL_LogInfo</para>
        /// <para>SDL_LogMessage</para>
        /// <para>SDL_LogMessageV</para>
        /// <para>SDL_LogVerbose</para>
        /// <para>SDL_LogWarn</para>
        /// </remarks>
        public static void LogDebug(int category, string fmt)
        {
            __Internal.LogDebug(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_INFO.</summary>
        /// <param name="category">the category of the message</param>
        /// <param name="fmt">a printf() style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the **fmt** string,</para>
        /// <para>if any</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Log</para>
        /// <para>SDL_LogCritical</para>
        /// <para>SDL_LogDebug</para>
        /// <para>SDL_LogError</para>
        /// <para>SDL_LogMessage</para>
        /// <para>SDL_LogMessageV</para>
        /// <para>SDL_LogVerbose</para>
        /// <para>SDL_LogWarn</para>
        /// </remarks>
        public static void LogInfo(int category, string fmt)
        {
            __Internal.LogInfo(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_WARN.</summary>
        /// <param name="category">the category of the message</param>
        /// <param name="fmt">a printf() style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the **fmt** string,</para>
        /// <para>if any</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Log</para>
        /// <para>SDL_LogCritical</para>
        /// <para>SDL_LogDebug</para>
        /// <para>SDL_LogError</para>
        /// <para>SDL_LogInfo</para>
        /// <para>SDL_LogMessage</para>
        /// <para>SDL_LogMessageV</para>
        /// <para>SDL_LogVerbose</para>
        /// </remarks>
        public static void LogWarn(int category, string fmt)
        {
            __Internal.LogWarn(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_ERROR.</summary>
        /// <param name="category">the category of the message</param>
        /// <param name="fmt">a printf() style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the **fmt** string,</para>
        /// <para>if any</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Log</para>
        /// <para>SDL_LogCritical</para>
        /// <para>SDL_LogDebug</para>
        /// <para>SDL_LogInfo</para>
        /// <para>SDL_LogMessage</para>
        /// <para>SDL_LogMessageV</para>
        /// <para>SDL_LogVerbose</para>
        /// <para>SDL_LogWarn</para>
        /// </remarks>
        public static void LogError(int category, string fmt)
        {
            __Internal.LogError(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_CRITICAL.</summary>
        /// <param name="category">the category of the message</param>
        /// <param name="fmt">a printf() style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the **fmt** string,</para>
        /// <para>if any</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Log</para>
        /// <para>SDL_LogDebug</para>
        /// <para>SDL_LogError</para>
        /// <para>SDL_LogInfo</para>
        /// <para>SDL_LogMessage</para>
        /// <para>SDL_LogMessageV</para>
        /// <para>SDL_LogVerbose</para>
        /// <para>SDL_LogWarn</para>
        /// </remarks>
        public static void LogCritical(int category, string fmt)
        {
            __Internal.LogCritical(category, fmt);
        }

        /// <summary>Log a message with the specified category and priority.</summary>
        /// <param name="category">the category of the message</param>
        /// <param name="priority">the priority of the message</param>
        /// <param name="fmt">a printf() style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the **fmt** string,</para>
        /// <para>if any</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Log</para>
        /// <para>SDL_LogCritical</para>
        /// <para>SDL_LogDebug</para>
        /// <para>SDL_LogError</para>
        /// <para>SDL_LogInfo</para>
        /// <para>SDL_LogMessageV</para>
        /// <para>SDL_LogVerbose</para>
        /// <para>SDL_LogWarn</para>
        /// </remarks>
        public static void LogMessage(int category, global::SDL3Sharp.LogPriority priority, string fmt)
        {
            __Internal.LogMessage(category, priority, fmt);
        }

        /// <summary>Get the current log output function.</summary>
        /// <param name="callback">
        /// <para>an SDL_LogOutputFunction filled in with the current log</para>
        /// <para>callback</para>
        /// </param>
        /// <param name="userdata">
        /// <para>a pointer filled in with the pointer that is passed to</para>
        /// <para>`callback`</para>
        /// </param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LogSetOutputFunction</para>
        /// </remarks>
        public static void LogGetOutputFunction(global::SDL3Sharp.LogOutputFunction callback, __IntPtr* userdata)
        {
            var __arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            __Internal.LogGetOutputFunction(__arg0, userdata);
        }

        /// <summary>Replace the default log output function with one of your own.</summary>
        /// <param name="callback">an SDL_LogOutputFunction to call instead of the default</param>
        /// <param name="userdata">a pointer that is passed to `callback`</param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LogGetOutputFunction</para>
        /// </remarks>
        public static void LogSetOutputFunction(global::SDL3Sharp.LogOutputFunction callback, __IntPtr userdata)
        {
            var __arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            __Internal.LogSetOutputFunction(__arg0, userdata);
        }
    }
}
