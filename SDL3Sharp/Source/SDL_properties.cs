// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>SDL property type</summary>
    public enum PropertyType
    {
        Invalid = 0,
        Pointer = 1,
        String = 2,
        Number = 3,
        Float = 4,
        Boolean = 5
    }

    /// <summary>SDL properties ID</summary>
    /// <summary>SDL property type</summary>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void EnumeratePropertiesCallback(__IntPtr userdata, uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetGlobalProperties", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetGlobalProperties();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_CreateProperties", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint CreateProperties();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_CopyProperties", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CopyProperties(uint src, uint dst);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LockProperties", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LockProperties(uint props);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_UnlockProperties", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnlockProperties(uint props);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetPropertyWithCleanup", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetPropertyWithCleanup(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, __IntPtr value, __IntPtr cleanup, __IntPtr userdata);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, __IntPtr value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetStringProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetStringProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetNumberProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetNumberProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, long value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetFloatProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetFloatProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, float value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetBooleanProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetBooleanProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetPropertyType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SDL3Sharp.PropertyType GetPropertyType(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, __IntPtr default_value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetStringProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetStringProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string default_value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetNumberProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long GetNumberProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, long default_value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetFloatProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetFloatProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, float default_value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetBooleanProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool GetBooleanProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool default_value);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ClearProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ClearProperty(uint props, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_EnumerateProperties", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EnumerateProperties(uint props, __IntPtr callback, __IntPtr userdata);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_DestroyProperties", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyProperties(uint props);
        }

        /// <summary>Get the global SDL properties</summary>
        /// <remarks>
        /// <para>a valid property ID on success or 0 on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetProperty</para>
        /// <para>SDL_SetProperty</para>
        /// </remarks>
        public static uint GetGlobalProperties()
        {
            var ___ret = __Internal.GetGlobalProperties();
            return ___ret;
        }

        /// <summary>Create a set of properties</summary>
        /// <remarks>
        /// <para>All properties are automatically destroyed when SDL_Quit() is called.</para>
        /// <para>an ID for a new set of properties, or 0 on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_DestroyProperties</para>
        /// </remarks>
        public static uint CreateProperties()
        {
            var ___ret = __Internal.CreateProperties();
            return ___ret;
        }

        /// <summary>Copy a set of properties</summary>
        /// <param name="src">the properties to copy</param>
        /// <param name="dst">the destination properties</param>
        /// <remarks>
        /// <para>Copy all the properties from one set of properties to another, with the</para>
        /// <para>exception of properties requiring cleanup (set using</para>
        /// <para>SDL_SetPropertyWithCleanup()), which will not be copied. Any property that</para>
        /// <para>already exists on `dst` will be overwritten.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int CopyProperties(uint src, uint dst)
        {
            var ___ret = __Internal.CopyProperties(src, dst);
            return ___ret;
        }

        /// <summary>Lock a set of properties</summary>
        /// <param name="props">the properties to lock</param>
        /// <remarks>
        /// <para>Obtain a multi-threaded lock for these properties. Other threads will wait</para>
        /// <para>while trying to lock these properties until they are unlocked. Properties</para>
        /// <para>must be unlocked before they are destroyed.</para>
        /// <para>The lock is automatically taken when setting individual properties, this</para>
        /// <para>function is only needed when you want to set several properties atomically</para>
        /// <para>or want to guarantee that properties being queried aren't freed in another</para>
        /// <para>thread.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_UnlockProperties</para>
        /// </remarks>
        public static int LockProperties(uint props)
        {
            var ___ret = __Internal.LockProperties(props);
            return ___ret;
        }

        /// <summary>Unlock a set of properties</summary>
        /// <param name="props">the properties to unlock</param>
        /// <remarks>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LockProperties</para>
        /// </remarks>
        public static void UnlockProperties(uint props)
        {
            __Internal.UnlockProperties(props);
        }

        /// <summary>
        /// <para>Set a property on a set of properties with a cleanup function that is</para>
        /// <para>called when the property is deleted</para>
        /// </summary>
        /// <param name="props">the properties to modify</param>
        /// <param name="name">the name of the property to modify</param>
        /// <param name="value">the new value of the property, or NULL to delete the property</param>
        /// <param name="cleanup">
        /// <para>the function to call when this property is deleted, or NULL</para>
        /// <para>if no cleanup is necessary</para>
        /// </param>
        /// <param name="userdata">a pointer that is passed to the cleanup function</param>
        /// <remarks>
        /// <para>The cleanup function is also called if setting the property fails for any</para>
        /// <para>reason.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetProperty</para>
        /// <para>SDL_SetProperty</para>
        /// </remarks>
        public static int SetPropertyWithCleanup(uint props, string name, __IntPtr value, global::SDL3Sharp.Delegates.Action___IntPtr___IntPtr cleanup, __IntPtr userdata)
        {
            var __arg3 = cleanup == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cleanup);
            var ___ret = __Internal.SetPropertyWithCleanup(props, name, value, __arg3, userdata);
            return ___ret;
        }

        /// <summary>Set a property on a set of properties</summary>
        /// <param name="props">the properties to modify</param>
        /// <param name="name">the name of the property to modify</param>
        /// <param name="value">the new value of the property, or NULL to delete the property</param>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetProperty</para>
        /// <para>SDL_SetPropertyWithCleanup</para>
        /// </remarks>
        public static int SetProperty(uint props, string name, __IntPtr value)
        {
            var ___ret = __Internal.SetProperty(props, name, value);
            return ___ret;
        }

        /// <summary>Set a string property on a set of properties</summary>
        /// <param name="props">the properties to modify</param>
        /// <param name="name">the name of the property to modify</param>
        /// <param name="value">the new value of the property, or NULL to delete the property</param>
        /// <remarks>
        /// <para>This function makes a copy of the string; the caller does not have to</para>
        /// <para>preserve the data after this call completes.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetStringProperty</para>
        /// </remarks>
        public static int SetStringProperty(uint props, string name, string value)
        {
            var ___ret = __Internal.SetStringProperty(props, name, value);
            return ___ret;
        }

        /// <summary>Set an integer property on a set of properties</summary>
        /// <param name="props">the properties to modify</param>
        /// <param name="name">the name of the property to modify</param>
        /// <param name="value">the new value of the property</param>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetNumberProperty</para>
        /// </remarks>
        public static int SetNumberProperty(uint props, string name, long value)
        {
            var ___ret = __Internal.SetNumberProperty(props, name, value);
            return ___ret;
        }

        /// <summary>Set a floating point property on a set of properties</summary>
        /// <param name="props">the properties to modify</param>
        /// <param name="name">the name of the property to modify</param>
        /// <param name="value">the new value of the property</param>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetFloatProperty</para>
        /// </remarks>
        public static int SetFloatProperty(uint props, string name, float value)
        {
            var ___ret = __Internal.SetFloatProperty(props, name, value);
            return ___ret;
        }

        /// <summary>Set a boolean property on a set of properties</summary>
        /// <param name="props">the properties to modify</param>
        /// <param name="name">the name of the property to modify</param>
        /// <param name="value">the new value of the property</param>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetBooleanProperty</para>
        /// </remarks>
        public static int SetBooleanProperty(uint props, string name, bool value)
        {
            var ___ret = __Internal.SetBooleanProperty(props, name, value);
            return ___ret;
        }

        /// <summary>Return whether a property exists in a set of properties.</summary>
        /// <param name="props">the properties to query</param>
        /// <param name="name">the name of the property to query</param>
        /// <remarks>
        /// <para>SDL_TRUE if the property exists, or SDL_FALSE if it doesn't.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPropertyType</para>
        /// </remarks>
        public static bool HasProperty(uint props, string name)
        {
            var ___ret = __Internal.HasProperty(props, name);
            return ___ret;
        }

        /// <summary>Get the type of a property on a set of properties</summary>
        /// <param name="props">the properties to query</param>
        /// <param name="name">the name of the property to query</param>
        /// <remarks>
        /// <para>the type of the property, or SDL_PROPERTY_TYPE_INVALID if it is</para>
        /// <para>not set.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasProperty</para>
        /// </remarks>
        public static global::SDL3Sharp.PropertyType GetPropertyType(uint props, string name)
        {
            var ___ret = __Internal.GetPropertyType(props, name);
            return ___ret;
        }

        /// <summary>Get a property on a set of properties</summary>
        /// <param name="props">the properties to query</param>
        /// <param name="name">the name of the property to query</param>
        /// <param name="default_value">the default value of the property</param>
        /// <remarks>
        /// <para>By convention, the names of properties that SDL exposes on objects will</para>
        /// <para>start with &quot;SDL.&quot;, and properties that SDL uses internally will start with</para>
        /// <para>&quot;SDL.internal.&quot;. These should be considered read-only and should not be</para>
        /// <para>modified by applications.</para>
        /// <para>the value of the property, or `default_value` if it is not set or</para>
        /// <para>not a pointer property.</para>
        /// <para>It is safe to call this function from any thread, although</para>
        /// <para>the data returned is not protected and could potentially be</para>
        /// <para>freed if you call SDL_SetProperty() or SDL_ClearProperty() on</para>
        /// <para>these properties from another thread. If you need to avoid</para>
        /// <para>this, use SDL_LockProperties() and SDL_UnlockProperties().</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPropertyType</para>
        /// <para>SDL_HasProperty</para>
        /// <para>SDL_SetProperty</para>
        /// </remarks>
        public static __IntPtr GetProperty(uint props, string name, __IntPtr default_value)
        {
            var ___ret = __Internal.GetProperty(props, name, default_value);
            return ___ret;
        }

        /// <summary>Get a string property on a set of properties</summary>
        /// <param name="props">the properties to query</param>
        /// <param name="name">the name of the property to query</param>
        /// <param name="default_value">the default value of the property</param>
        /// <remarks>
        /// <para>the value of the property, or `default_value` if it is not set or</para>
        /// <para>not a string property.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPropertyType</para>
        /// <para>SDL_HasProperty</para>
        /// <para>SDL_SetStringProperty</para>
        /// </remarks>
        public static string GetStringProperty(uint props, string name, string default_value)
        {
            var ___ret = __Internal.GetStringProperty(props, name, default_value);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Get a number property on a set of properties</summary>
        /// <param name="props">the properties to query</param>
        /// <param name="name">the name of the property to query</param>
        /// <param name="default_value">the default value of the property</param>
        /// <remarks>
        /// <para>You can use SDL_GetPropertyType() to query whether the property exists and</para>
        /// <para>is a number property.</para>
        /// <para>the value of the property, or `default_value` if it is not set or</para>
        /// <para>not a number property.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPropertyType</para>
        /// <para>SDL_HasProperty</para>
        /// <para>SDL_SetNumberProperty</para>
        /// </remarks>
        public static long GetNumberProperty(uint props, string name, long default_value)
        {
            var ___ret = __Internal.GetNumberProperty(props, name, default_value);
            return ___ret;
        }

        /// <summary>Get a floating point property on a set of properties</summary>
        /// <param name="props">the properties to query</param>
        /// <param name="name">the name of the property to query</param>
        /// <param name="default_value">the default value of the property</param>
        /// <remarks>
        /// <para>You can use SDL_GetPropertyType() to query whether the property exists and</para>
        /// <para>is a floating point property.</para>
        /// <para>the value of the property, or `default_value` if it is not set or</para>
        /// <para>not a float property.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPropertyType</para>
        /// <para>SDL_HasProperty</para>
        /// <para>SDL_SetFloatProperty</para>
        /// </remarks>
        public static float GetFloatProperty(uint props, string name, float default_value)
        {
            var ___ret = __Internal.GetFloatProperty(props, name, default_value);
            return ___ret;
        }

        /// <summary>Get a boolean property on a set of properties</summary>
        /// <param name="props">the properties to query</param>
        /// <param name="name">the name of the property to query</param>
        /// <param name="default_value">the default value of the property</param>
        /// <remarks>
        /// <para>You can use SDL_GetPropertyType() to query whether the property exists and</para>
        /// <para>is a boolean property.</para>
        /// <para>the value of the property, or `default_value` if it is not set or</para>
        /// <para>not a float property.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPropertyType</para>
        /// <para>SDL_HasProperty</para>
        /// <para>SDL_SetBooleanProperty</para>
        /// </remarks>
        public static bool GetBooleanProperty(uint props, string name, bool default_value)
        {
            var ___ret = __Internal.GetBooleanProperty(props, name, default_value);
            return ___ret;
        }

        /// <summary>Clear a property on a set of properties</summary>
        /// <param name="props">the properties to modify</param>
        /// <param name="name">the name of the property to clear</param>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int ClearProperty(uint props, string name)
        {
            var ___ret = __Internal.ClearProperty(props, name);
            return ___ret;
        }

        /// <summary>Enumerate the properties on a set of properties</summary>
        /// <param name="props">the properties to query</param>
        /// <param name="callback">the function to call for each property</param>
        /// <param name="userdata">a pointer that is passed to `callback`</param>
        /// <remarks>
        /// <para>The callback function is called for each property on the set of properties.</para>
        /// <para>The properties are locked during enumeration.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>It is safe to call this function from any thread.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int EnumerateProperties(uint props, global::SDL3Sharp.EnumeratePropertiesCallback callback, __IntPtr userdata)
        {
            var __arg1 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var ___ret = __Internal.EnumerateProperties(props, __arg1, userdata);
            return ___ret;
        }

        /// <summary>Destroy a set of properties</summary>
        /// <param name="props">the properties to destroy</param>
        /// <remarks>
        /// <para>All properties are deleted and their cleanup functions will be called, if</para>
        /// <para>any.</para>
        /// <para>This function should not be called while these properties are</para>
        /// <para>locked or other threads might be setting or getting values</para>
        /// <para>from these properties.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_CreateProperties</para>
        /// </remarks>
        public static void DestroyProperties(uint props)
        {
            __Internal.DestroyProperties(props);
        }
    }
}
