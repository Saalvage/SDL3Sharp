// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>
    /// <para>An SDL_GUID is a 128-bit identifier for an input device that</para>
    /// <para>identifies that device across runs of SDL programs on the same</para>
    /// <para>platform.  If the device is detached and then re-attached to a</para>
    /// <para>different port, or if the base system is rebooted, the device</para>
    /// <para>should still report the same GUID.</para>
    /// </summary>
    /// <remarks>
    /// <para>GUIDs are as precise as possible but are not guaranteed to</para>
    /// <para>distinguish physically distinct but equivalent devices.  For</para>
    /// <para>example, two game controllers from the same vendor with the same</para>
    /// <para>product ID and revision may have the same GUID.</para>
    /// <para>GUIDs may be platform-dependent (i.e., the same device may report</para>
    /// <para>different GUIDs on different operating systems).</para>
    /// </remarks>
    /// <summary>
    /// <para>An SDL_GUID is a 128-bit identifier for an input device that</para>
    /// <para>identifies that device across runs of SDL programs on the same</para>
    /// <para>platform.  If the device is detached and then re-attached to a</para>
    /// <para>different port, or if the base system is rebooted, the device</para>
    /// <para>should still report the same GUID.</para>
    /// </summary>
    /// <remarks>
    /// <para>GUIDs are as precise as possible but are not guaranteed to</para>
    /// <para>distinguish physically distinct but equivalent devices.  For</para>
    /// <para>example, two game controllers from the same vendor with the same</para>
    /// <para>product ID and revision may have the same GUID.</para>
    /// <para>GUIDs may be platform-dependent (i.e., the same device may report</para>
    /// <para>different GUIDs on different operating systems).</para>
    /// </remarks>
    public unsafe partial class GUID : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16, Pack = 8)]
        public partial struct __Internal
        {
            internal fixed byte data[16];

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_GUID@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.GUID> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.GUID>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.GUID managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.GUID managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static GUID __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new GUID(native.ToPointer(), skipVTables);
        }

        internal static GUID __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (GUID)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static GUID __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new GUID(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GUID(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected GUID(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public GUID()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.GUID.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public GUID(global::SDL3Sharp.GUID _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.GUID.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.GUID.__Internal*) __Instance) = *((global::SDL3Sharp.GUID.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Data
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->data, 16);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 16; i++)
                        ((__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GUIDToString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GUIDToString(__IntPtr guid, sbyte* pszGUID, int cbGUID);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GUIDFromString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GUIDFromString(__IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pchGUID);
        }

        /// <summary>Get an ASCII string representation for a given ::SDL_GUID.</summary>
        /// <param name="guid">the ::SDL_GUID you wish to convert to string</param>
        /// <param name="pszGUID">buffer in which to write the ASCII string</param>
        /// <param name="cbGUID">the size of pszGUID</param>
        /// <remarks>
        /// <para>You should supply at least 33 bytes for pszGUID.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GUIDFromString</para>
        /// </remarks>
        public static int GUIDToString(global::SDL3Sharp.GUID guid, sbyte* pszGUID, int cbGUID)
        {
            if (ReferenceEquals(guid, null))
                throw new global::System.ArgumentNullException("guid", "Cannot be null because it is passed by value.");
            var __arg0 = guid.__Instance;
            var ___ret = __Internal.GUIDToString(__arg0, pszGUID, cbGUID);
            return ___ret;
        }

        /// <summary>Convert a GUID string into a ::SDL_GUID structure.</summary>
        /// <param name="pchGUID">string containing an ASCII representation of a GUID</param>
        /// <remarks>
        /// <para>Performs no error checking. If this function is given a string containing</para>
        /// <para>an invalid GUID, the function will silently succeed, but the GUID generated</para>
        /// <para>will not be useful.</para>
        /// <para>a ::SDL_GUID structure.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GUIDToString</para>
        /// </remarks>
        public static global::SDL3Sharp.GUID GUIDFromString(string pchGUID)
        {
            var ___ret = new global::SDL3Sharp.GUID.__Internal();
            __Internal.GUIDFromString(new IntPtr(&___ret), pchGUID);
            return global::SDL3Sharp.GUID.__CreateInstance(___ret);
        }
    }
}
