// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    public unsafe partial class Locale : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16, Pack = 8)]
        public partial struct __Internal
        {
            internal __IntPtr language;
            internal __IntPtr country;

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_Locale@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.Locale> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.Locale>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.Locale managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.Locale managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __language_OwnsNativeMemory = false;
        private bool __country_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static Locale __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Locale(native.ToPointer(), skipVTables);
        }

        internal static Locale __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Locale)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Locale __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Locale(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Locale(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Locale(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public Locale()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.Locale.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public Locale(global::SDL3Sharp.Locale _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.Locale.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.Locale.__Internal*) __Instance) = *((global::SDL3Sharp.Locale.__Internal*) _0.__Instance);
            if (_0.__language_OwnsNativeMemory)
                this.Language = _0.Language;
            if (_0.__country_OwnsNativeMemory)
                this.Country = _0.Country;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__language_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->language);
            if (__country_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->country);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>A language name, like &quot;en&quot; for English.</summary>
        public string Language
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->language);
            }

            set
            {
                if (__language_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->language);
                __language_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->language = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->language = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>A country, like &quot;US&quot; for America. Can be NULL.</summary>
        public string Country
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->country);
            }

            set
            {
                if (__country_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->country);
                __country_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->country = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->country = (__IntPtr) __bytePtr0;
            }
        }
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetPreferredLocales", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPreferredLocales();
        }

        /// <summary>Report the user's preferred locale.</summary>
        /// <remarks>
        /// <para>This returns an array of SDL_Locale structs, the final item zeroed out.</para>
        /// <para>When the caller is done with this array, it should call SDL_free() on the</para>
        /// <para>returned value; all the memory involved is allocated in a single block, so</para>
        /// <para>a single SDL_free() will suffice.</para>
        /// <para>Returned language strings are in the format xx, where 'xx' is an ISO-639</para>
        /// <para>language specifier (such as &quot;en&quot; for English, &quot;de&quot; for German, etc).</para>
        /// <para>Country strings are in the format YY, where &quot;YY&quot; is an ISO-3166 country</para>
        /// <para>code (such as &quot;US&quot; for the United States, &quot;CA&quot; for Canada, etc). Country</para>
        /// <para>might be NULL if there's no specific guidance on them (so you might get {</para>
        /// <para>&quot;en&quot;, &quot;US&quot; } for American English, but { &quot;en&quot;, NULL } means &quot;English</para>
        /// <para>language, generically&quot;). Language strings are never NULL, except to</para>
        /// <para>terminate the array.</para>
        /// <para>Please note that not all of these strings are 2 characters; some are three</para>
        /// <para>or more.</para>
        /// <para>The returned list of locales are in the order of the user's preference. For</para>
        /// <para>example, a German citizen that is fluent in US English and knows enough</para>
        /// <para>Japanese to navigate around Tokyo might have a list like: { &quot;de&quot;, &quot;en_US&quot;,</para>
        /// <para>&quot;jp&quot;, NULL }. Someone from England might prefer British English (where</para>
        /// <para>&quot;color&quot; is spelled &quot;colour&quot;, etc), but will settle for anything like it: {</para>
        /// <para>&quot;en_GB&quot;, &quot;en&quot;, NULL }.</para>
        /// <para>This function returns NULL on error, including when the platform does not</para>
        /// <para>supply this information at all.</para>
        /// <para>This might be a &quot;slow&quot; call that has to query the operating system. It's</para>
        /// <para>best to ask for this once and save the results. However, this list can</para>
        /// <para>change, usually because the user has changed a system preference outside of</para>
        /// <para>your program; SDL will send an SDL_EVENT_LOCALE_CHANGED event in this case,</para>
        /// <para>if possible, and you can call this function again to get an updated copy of</para>
        /// <para>preferred locales.</para>
        /// <para>array of locales, terminated with a locale with a NULL language</para>
        /// <para>field. Will return NULL on error.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static global::SDL3Sharp.Locale GetPreferredLocales()
        {
            var ___ret = __Internal.GetPreferredLocales();
            var __result0 = global::SDL3Sharp.Locale.__GetOrCreateInstance(___ret, false);
            return __result0;
        }
    }
}
