// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>
    /// <para>Callback function that will be called when data for the specified mime-type</para>
    /// <para>is requested by the OS.</para>
    /// </summary>
    /// <param name="userdata">A pointer to provided user data</param>
    /// <param name="mime_type">The requested mime-type</param>
    /// <param name="size">A pointer filled in with the length of the returned data</param>
    /// <remarks>
    /// <para>The callback function is called with NULL as the mime_type when the clipboard</para>
    /// <para>is cleared or new data is set. The clipboard is automatically cleared in SDL_Quit().</para>
    /// <para>a pointer to the data for the provided mime-type. Returning NULL or</para>
    /// <para>setting length to 0 will cause no data to be sent to the &quot;receiver&quot;. It is</para>
    /// <para>up to the receiver to handle this. Essentially returning no data is more or</para>
    /// <para>less undefined behavior and may cause breakage in receiving applications.</para>
    /// <para>The returned data will not be freed so it needs to be retained and dealt</para>
    /// <para>with internally.</para>
    /// <para>This function is available since SDL 3.0.0.</para>
    /// <para>SDL_SetClipboardData</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr ClipboardDataCallback(__IntPtr userdata, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string mime_type, ulong* size);

    /// <summary>Callback function that will be called when the clipboard is cleared, or new data is set.</summary>
    /// <param name="userdata">A pointer to provided user data</param>
    /// <remarks>
    /// <para>This function is available since SDL 3.0.0.</para>
    /// <para>SDL_SetClipboardData</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void ClipboardCleanupCallback(__IntPtr userdata);

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetClipboardText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetClipboardText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetClipboardText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetClipboardText();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasClipboardText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasClipboardText();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetPrimarySelectionText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetPrimarySelectionText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetPrimarySelectionText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetPrimarySelectionText();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasPrimarySelectionText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasPrimarySelectionText();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetClipboardData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetClipboardData(__IntPtr callback, __IntPtr cleanup, __IntPtr userdata, sbyte** mime_types, ulong num_mime_types);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ClearClipboardData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ClearClipboardData();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetClipboardData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetClipboardData([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string mime_type, ulong* size);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasClipboardData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasClipboardData([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string mime_type);
        }

        /// <summary>Put UTF-8 text into the clipboard.</summary>
        /// <param name="text">the text to store in the clipboard</param>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetClipboardText</para>
        /// <para>SDL_HasClipboardText</para>
        /// </remarks>
        public static int SetClipboardText(string text)
        {
            var ___ret = __Internal.SetClipboardText(text);
            return ___ret;
        }

        /// <summary>Get UTF-8 text from the clipboard, which must be freed with SDL_free().</summary>
        /// <remarks>
        /// <para>This functions returns empty string if there was not enough memory left for</para>
        /// <para>a copy of the clipboard's content.</para>
        /// <para>the clipboard text on success or an empty string on failure; call</para>
        /// <para>SDL_GetError() for more information. Caller must call SDL_free()</para>
        /// <para>on the returned pointer when done with it (even if there was an</para>
        /// <para>error).</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasClipboardText</para>
        /// <para>SDL_SetClipboardText</para>
        /// </remarks>
        public static sbyte* GetClipboardText()
        {
            var ___ret = __Internal.GetClipboardText();
            return ___ret;
        }

        /// <summary>Query whether the clipboard exists and contains a non-empty text string.</summary>
        /// <remarks>
        /// <para>SDL_TRUE if the clipboard has text, or SDL_FALSE if it does not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetClipboardText</para>
        /// <para>SDL_SetClipboardText</para>
        /// </remarks>
        public static bool HasClipboardText()
        {
            var ___ret = __Internal.HasClipboardText();
            return ___ret;
        }

        /// <summary>Put UTF-8 text into the primary selection.</summary>
        /// <param name="text">the text to store in the primary selection</param>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPrimarySelectionText</para>
        /// <para>SDL_HasPrimarySelectionText</para>
        /// </remarks>
        public static int SetPrimarySelectionText(string text)
        {
            var ___ret = __Internal.SetPrimarySelectionText(text);
            return ___ret;
        }

        /// <summary>
        /// <para>Get UTF-8 text from the primary selection, which must be freed with</para>
        /// <para>SDL_free().</para>
        /// </summary>
        /// <remarks>
        /// <para>This functions returns empty string if there was not enough memory left for</para>
        /// <para>a copy of the primary selection's content.</para>
        /// <para>the primary selection text on success or an empty string on</para>
        /// <para>failure; call SDL_GetError() for more information. Caller must</para>
        /// <para>call SDL_free() on the returned pointer when done with it (even if</para>
        /// <para>there was an error).</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasPrimarySelectionText</para>
        /// <para>SDL_SetPrimarySelectionText</para>
        /// </remarks>
        public static sbyte* GetPrimarySelectionText()
        {
            var ___ret = __Internal.GetPrimarySelectionText();
            return ___ret;
        }

        /// <summary>
        /// <para>Query whether the primary selection exists and contains a non-empty text</para>
        /// <para>string.</para>
        /// </summary>
        /// <remarks>
        /// <para>SDL_TRUE if the primary selection has text, or SDL_FALSE if it</para>
        /// <para>does not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPrimarySelectionText</para>
        /// <para>SDL_SetPrimarySelectionText</para>
        /// </remarks>
        public static bool HasPrimarySelectionText()
        {
            var ___ret = __Internal.HasPrimarySelectionText();
            return ___ret;
        }

        /// <summary>Offer clipboard data to the OS</summary>
        /// <param name="callback">
        /// <para>A function pointer to the function that provides the</para>
        /// <para>clipboard data</para>
        /// </param>
        /// <param name="cleanup">
        /// <para>A function pointer to the function that cleans up the</para>
        /// <para>clipboard data</para>
        /// </param>
        /// <param name="userdata">An opaque pointer that will be forwarded to the callbacks</param>
        /// <param name="mime_types">A list of mime-types that are being offered</param>
        /// <param name="num_mime_types">The number of mime-types in the mime_types list</param>
        /// <remarks>
        /// <para>Tell the operating system that the application is offering clipboard data</para>
        /// <para>for each of the proivded mime-types. Once another application requests the</para>
        /// <para>data the callback function will be called allowing it to generate and</para>
        /// <para>respond with the data for the requested mime-type.</para>
        /// <para>The size of text data does not include any terminator, and the text does</para>
        /// <para>not need to be null terminated (e.g. you can directly copy a portion of a</para>
        /// <para>document)</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_ClipboardDataCallback</para>
        /// <para>SDL_SetClipboardData</para>
        /// <para>SDL_GetClipboardData</para>
        /// <para>SDL_HasClipboardData</para>
        /// </remarks>
        public static int SetClipboardData(global::SDL3Sharp.ClipboardDataCallback callback, global::SDL3Sharp.ClipboardCleanupCallback cleanup, __IntPtr userdata, sbyte** mime_types, ulong num_mime_types)
        {
            var __arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var __arg1 = cleanup == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(cleanup);
            var ___ret = __Internal.SetClipboardData(__arg0, __arg1, userdata, mime_types, num_mime_types);
            return ___ret;
        }

        /// <summary>Clear the clipboard data</summary>
        /// <remarks>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_SetClipboardData</para>
        /// </remarks>
        public static int ClearClipboardData()
        {
            var ___ret = __Internal.ClearClipboardData();
            return ___ret;
        }

        /// <summary>Get the data from clipboard for a given mime type</summary>
        /// <param name="mime_type">The mime type to read from the clipboard</param>
        /// <param name="size">A pointer filled in with the length of the returned data</param>
        /// <remarks>
        /// <para>The size of text data does not include the terminator, but the text is</para>
        /// <para>guaranteed to be null terminated.</para>
        /// <para>the retrieved data buffer or NULL on failure; call SDL_GetError()</para>
        /// <para>for more information. Caller must call SDL_free() on the returned</para>
        /// <para>pointer when done with it.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_SetClipboardData</para>
        /// </remarks>
        public static __IntPtr GetClipboardData(string mime_type, ref ulong size)
        {
            fixed (ulong* __size1 = &size)
            {
                var __arg1 = __size1;
                var ___ret = __Internal.GetClipboardData(mime_type, __arg1);
                return ___ret;
            }
        }

        /// <summary>Query whether there is data in the clipboard for the provided mime type</summary>
        /// <param name="mime_type">The mime type to check for data for</param>
        /// <remarks>
        /// <para>SDL_TRUE if there exists data in clipboard for the provided mime</para>
        /// <para>type, SDL_FALSE if it does not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_SetClipboardData</para>
        /// <para>SDL_GetClipboardData</para>
        /// </remarks>
        public static bool HasClipboardData(string mime_type)
        {
            var ___ret = __Internal.HasClipboardData(mime_type);
            return ___ret;
        }
    }
}
