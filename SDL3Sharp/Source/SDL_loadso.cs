// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LoadObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LoadObject([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sofile);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LoadFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LoadFunction(__IntPtr handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_UnloadObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnloadObject(__IntPtr handle);
        }

        /// <summary>Dynamically load a shared object.</summary>
        /// <param name="sofile">a system-dependent name of the object file</param>
        /// <remarks>
        /// <para>an opaque pointer to the object handle or NULL if there was an</para>
        /// <para>error; call SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LoadFunction</para>
        /// <para>SDL_UnloadObject</para>
        /// </remarks>
        public static __IntPtr LoadObject(string sofile)
        {
            var ___ret = __Internal.LoadObject(sofile);
            return ___ret;
        }

        /// <summary>Look up the address of the named function in a shared object.</summary>
        /// <param name="handle">a valid shared object handle returned by SDL_LoadObject()</param>
        /// <param name="name">the name of the function to look up</param>
        /// <remarks>
        /// <para>This function pointer is no longer valid after calling SDL_UnloadObject().</para>
        /// <para>This function can only look up C function names. Other languages may have</para>
        /// <para>name mangling and intrinsic language support that varies from compiler to</para>
        /// <para>compiler.</para>
        /// <para>Make sure you declare your function pointers with the same calling</para>
        /// <para>convention as the actual library function. Your code will crash</para>
        /// <para>mysteriously if you do not do this.</para>
        /// <para>If the requested function doesn't exist, NULL is returned.</para>
        /// <para>a pointer to the function or NULL if there was an error; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LoadObject</para>
        /// <para>SDL_UnloadObject</para>
        /// </remarks>
        public static global::SDL3Sharp.FunctionPointer LoadFunction(__IntPtr handle, string name)
        {
            var ___ret = __Internal.LoadFunction(handle, name);
            var __ptr0 = ___ret;
            return __ptr0 == IntPtr.Zero? null : (global::SDL3Sharp.FunctionPointer) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SDL3Sharp.FunctionPointer));
        }

        /// <summary>Unload a shared object from memory.</summary>
        /// <param name="handle">a valid shared object handle returned by SDL_LoadObject()</param>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LoadFunction</para>
        /// <para>SDL_LoadObject</para>
        /// </remarks>
        public static void UnloadObject(__IntPtr handle)
        {
            __Internal.UnloadObject(handle);
        }
    }
}
