// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>The basic state for the system's power supply.</summary>
    public enum PowerState
    {
        /// <summary>cannot determine power status</summary>
        Unknown = 0,
        /// <summary>Not plugged in, running on the battery</summary>
        OnBattery = 1,
        /// <summary>Plugged in, no battery available</summary>
        NoBattery = 2,
        /// <summary>Plugged in, charging battery</summary>
        Charging = 3,
        /// <summary>Plugged in, battery charged</summary>
        Charged = 4
    }

    /// <summary>The basic state for the system's power supply.</summary>
    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetPowerInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SDL3Sharp.PowerState GetPowerInfo(int* seconds, int* percent);
        }

        /// <summary>Get the current power supply details.</summary>
        /// <param name="seconds">
        /// <para>seconds of battery life left, you can pass a NULL here if</para>
        /// <para>you don't care, will return -1 if we can't determine a</para>
        /// <para>value, or we're not running on a battery</para>
        /// </param>
        /// <param name="percent">
        /// <para>percentage of battery life left, between 0 and 100, you can</para>
        /// <para>pass a NULL here if you don't care, will return -1 if we</para>
        /// <para>can't determine a value, or we're not running on a battery</para>
        /// </param>
        /// <remarks>
        /// <para>You should never take a battery status as absolute truth. Batteries</para>
        /// <para>(especially failing batteries) are delicate hardware, and the values</para>
        /// <para>reported here are best estimates based on what that hardware reports. It's</para>
        /// <para>not uncommon for older batteries to lose stored power much faster than it</para>
        /// <para>reports, or completely drain when reporting it has 20 percent left, etc.</para>
        /// <para>Battery status can change at any time; if you are concerned with power</para>
        /// <para>state, you should call this function frequently, and perhaps ignore changes</para>
        /// <para>until they seem to be stable for a few seconds.</para>
        /// <para>It's possible a platform can only report battery percentage or time left</para>
        /// <para>but not both.</para>
        /// <para>an SDL_PowerState enum representing the current battery state.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static global::SDL3Sharp.PowerState GetPowerInfo(ref int seconds, ref int percent)
        {
            fixed (int* __seconds0 = &seconds)
            {
                var __arg0 = __seconds0;
                fixed (int* __percent1 = &percent)
                {
                    var __arg1 = __percent1;
                    var ___ret = __Internal.GetPowerInfo(__arg0, __arg1);
                    return ___ret;
                }
            }
        }
    }
}
