// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>The blend mode used in SDL_RenderTexture() and drawing operations.</summary>
    public enum BlendMode
    {
        /// <summary>
        /// <para>no blending</para>
        /// <para>dstRGBA = srcRGBA</para>
        /// </summary>
        None = 0,
        /// <summary>
        /// <para>alpha blending</para>
        /// <para>dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))</para>
        /// <para>dstA = srcA + (dstA * (1-srcA))</para>
        /// </summary>
        Blend = 1,
        /// <summary>
        /// <para>additive blending</para>
        /// <para>dstRGB = (srcRGB * srcA) + dstRGB</para>
        /// <para>dstA = dstA</para>
        /// </summary>
        Add = 2,
        /// <summary>
        /// <para>color modulate</para>
        /// <para>dstRGB = srcRGB * dstRGB</para>
        /// <para>dstA = dstA</para>
        /// </summary>
        Mod = 4,
        /// <summary>
        /// <para>color multiply</para>
        /// <para>dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA))</para>
        /// <para>dstA = dstA</para>
        /// </summary>
        Mul = 8,
        Invalid = 2147483647
    }

    /// <summary>The blend operation used when combining source and destination pixel components</summary>
    public enum BlendOperation
    {
        /// <summary>dst + src: supported by all renderers</summary>
        Add = 1,
        /// <summary>src - dst : supported by D3D9, D3D11, OpenGL, OpenGLES</summary>
        Subtract = 2,
        /// <summary>dst - src : supported by D3D9, D3D11, OpenGL, OpenGLES</summary>
        RevSubtract = 3,
        /// <summary>min(dst, src) : supported by D3D9, D3D11</summary>
        Minimum = 4,
        /// <summary>max(dst, src) : supported by D3D9, D3D11</summary>
        Maximum = 5
    }

    /// <summary>The normalized factor used to multiply pixel components</summary>
    public enum BlendFactor
    {
        /// <summary>0, 0, 0, 0</summary>
        Zero = 1,
        /// <summary>1, 1, 1, 1</summary>
        One = 2,
        /// <summary>srcR, srcG, srcB, srcA</summary>
        SrcColor = 3,
        /// <summary>1-srcR, 1-srcG, 1-srcB, 1-srcA</summary>
        OneMinusSrcColor = 4,
        /// <summary>srcA, srcA, srcA, srcA</summary>
        SrcAlpha = 5,
        /// <summary>1-srcA, 1-srcA, 1-srcA, 1-srcA</summary>
        OneMinusSrcAlpha = 6,
        /// <summary>dstR, dstG, dstB, dstA</summary>
        DstColor = 7,
        /// <summary>1-dstR, 1-dstG, 1-dstB, 1-dstA</summary>
        OneMinusDstColor = 8,
        /// <summary>dstA, dstA, dstA, dstA</summary>
        DstAlpha = 9,
        /// <summary>1-dstA, 1-dstA, 1-dstA, 1-dstA</summary>
        OneMinusDstAlpha = 10
    }

    /// <summary>The blend mode used in SDL_RenderTexture() and drawing operations.</summary>
    /// <summary>The blend operation used when combining source and destination pixel components</summary>
    /// <summary>The normalized factor used to multiply pixel components</summary>
    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ComposeCustomBlendMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SDL3Sharp.BlendMode ComposeCustomBlendMode(global::SDL3Sharp.BlendFactor srcColorFactor, global::SDL3Sharp.BlendFactor dstColorFactor, global::SDL3Sharp.BlendOperation colorOperation, global::SDL3Sharp.BlendFactor srcAlphaFactor, global::SDL3Sharp.BlendFactor dstAlphaFactor, global::SDL3Sharp.BlendOperation alphaOperation);
        }

        /// <summary>Compose a custom blend mode for renderers.</summary>
        /// <param name="srcColorFactor">
        /// <para>the SDL_BlendFactor applied to the red, green, and</para>
        /// <para>blue components of the source pixels</para>
        /// </param>
        /// <param name="dstColorFactor">
        /// <para>the SDL_BlendFactor applied to the red, green, and</para>
        /// <para>blue components of the destination pixels</para>
        /// </param>
        /// <param name="colorOperation">
        /// <para>the SDL_BlendOperation used to combine the red,</para>
        /// <para>green, and blue components of the source and</para>
        /// <para>destination pixels</para>
        /// </param>
        /// <param name="srcAlphaFactor">
        /// <para>the SDL_BlendFactor applied to the alpha component of</para>
        /// <para>the source pixels</para>
        /// </param>
        /// <param name="dstAlphaFactor">
        /// <para>the SDL_BlendFactor applied to the alpha component of</para>
        /// <para>the destination pixels</para>
        /// </param>
        /// <param name="alphaOperation">
        /// <para>the SDL_BlendOperation used to combine the alpha</para>
        /// <para>component of the source and destination pixels</para>
        /// </param>
        /// <remarks>
        /// <para>The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept</para>
        /// <para>the SDL_BlendMode returned by this function if the renderer supports it.</para>
        /// <para>A blend mode controls how the pixels from a drawing operation (source) get</para>
        /// <para>combined with the pixels from the render target (destination). First, the</para>
        /// <para>components of the source and destination pixels get multiplied with their</para>
        /// <para>blend factors. Then, the blend operation takes the two products and</para>
        /// <para>calculates the result that will get stored in the render target.</para>
        /// <para>Expressed in pseudocode, it would look like this:</para>
        /// <para>```c</para>
        /// <para>dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);</para>
        /// <para>dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);</para>
        /// <para>```</para>
        /// <para>Where the functions `colorOperation(src, dst)` and `alphaOperation(src,</para>
        /// <para>dst)` can return one of the following:</para>
        /// <para>- `src + dst`</para>
        /// <para>- `src - dst`</para>
        /// <para>- `dst - src`</para>
        /// <para>- `min(src, dst)`</para>
        /// <para>- `max(src, dst)`</para>
        /// <para>The red, green, and blue components are always multiplied with the first,</para>
        /// <para>second, and third components of the SDL_BlendFactor, respectively. The</para>
        /// <para>fourth component is not used.</para>
        /// <para>The alpha component is always multiplied with the fourth component of the</para>
        /// <para>SDL_BlendFactor. The other components are not used in the alpha</para>
        /// <para>calculation.</para>
        /// <para>Support for these blend modes varies for each renderer. To check if a</para>
        /// <para>specific SDL_BlendMode is supported, create a renderer and pass it to</para>
        /// <para>either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will</para>
        /// <para>return with an error if the blend mode is not supported.</para>
        /// <para>This list describes the support of custom blend modes for each renderer in</para>
        /// <para>SDL 2.0.6. All renderers support the four blend modes listed in the</para>
        /// <para>SDL_BlendMode enumeration.</para>
        /// <para>- **direct3d**: Supports all operations with all factors. However, some</para>
        /// <para>factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and</para>
        /// <para>`SDL_BLENDOPERATION_MAXIMUM`.</para>
        /// <para>- **direct3d11**: Same as Direct3D 9.</para>
        /// <para>- **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all</para>
        /// <para>factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL</para>
        /// <para>2.0.6.</para>
        /// <para>- **opengles**: Supports the `SDL_BLENDOPERATION_ADD` operation with all</para>
        /// <para>factors. Color and alpha factors need to be the same. OpenGL ES 1</para>
        /// <para>implementation specific: May also support `SDL_BLENDOPERATION_SUBTRACT`</para>
        /// <para>and `SDL_BLENDOPERATION_REV_SUBTRACT`. May support color and alpha</para>
        /// <para>operations being different from each other. May support color and alpha</para>
        /// <para>factors being different from each other.</para>
        /// <para>- **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,</para>
        /// <para>`SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`</para>
        /// <para>operations with all factors.</para>
        /// <para>- **psp**: No custom blend mode support.</para>
        /// <para>- **software**: No custom blend mode support.</para>
        /// <para>Some renderers do not provide an alpha component for the default render</para>
        /// <para>target. The `SDL_BLENDFACTOR_DST_ALPHA` and</para>
        /// <para>`SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this</para>
        /// <para>case.</para>
        /// <para>an SDL_BlendMode that represents the chosen factors and</para>
        /// <para>operations.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_SetRenderDrawBlendMode</para>
        /// <para>SDL_GetRenderDrawBlendMode</para>
        /// <para>SDL_SetTextureBlendMode</para>
        /// <para>SDL_GetTextureBlendMode</para>
        /// </remarks>
        public static global::SDL3Sharp.BlendMode ComposeCustomBlendMode(global::SDL3Sharp.BlendFactor srcColorFactor, global::SDL3Sharp.BlendFactor dstColorFactor, global::SDL3Sharp.BlendOperation colorOperation, global::SDL3Sharp.BlendFactor srcAlphaFactor, global::SDL3Sharp.BlendFactor dstAlphaFactor, global::SDL3Sharp.BlendOperation alphaOperation)
        {
            var ___ret = __Internal.ComposeCustomBlendMode(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation);
            return ___ret;
        }
    }
}
