// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>A type representing an atomic integer value.</summary>
    /// <remarks>It is a struct so people don't accidentally use numeric operations on it.</remarks>
    /// <summary>A type representing an atomic integer value.</summary>
    /// <remarks>It is a struct so people don't accidentally use numeric operations on it.</remarks>
    public unsafe partial class AtomicInt : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4, Pack = 8)]
        public partial struct __Internal
        {
            internal int value;

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_AtomicInt@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.AtomicInt> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.AtomicInt>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.AtomicInt managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.AtomicInt managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static AtomicInt __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new AtomicInt(native.ToPointer(), skipVTables);
        }

        internal static AtomicInt __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (AtomicInt)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static AtomicInt __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new AtomicInt(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AtomicInt(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected AtomicInt(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public AtomicInt()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.AtomicInt.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public AtomicInt(global::SDL3Sharp.AtomicInt _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.AtomicInt.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.AtomicInt.__Internal*) __Instance) = *((global::SDL3Sharp.AtomicInt.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Value
        {
            get
            {
                return ((__Internal*)__Instance)->value;
            }

            set
            {
                ((__Internal*)__Instance)->value = value;
            }
        }
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_TryLockSpinlock", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool TryLockSpinlock(int* @lock);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_LockSpinlock", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LockSpinlock(int* @lock);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_UnlockSpinlock", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnlockSpinlock(int* @lock);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_MemoryBarrierReleaseFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MemoryBarrierReleaseFunction();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_MemoryBarrierAcquireFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MemoryBarrierAcquireFunction();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_AtomicCompareAndSwap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool AtomicCompareAndSwap(__IntPtr a, int oldval, int newval);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_AtomicSet", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AtomicSet(__IntPtr a, int v);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_AtomicGet", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AtomicGet(__IntPtr a);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_AtomicAdd", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AtomicAdd(__IntPtr a, int v);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_AtomicCompareAndSwapPointer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool AtomicCompareAndSwapPointer(__IntPtr* a, __IntPtr oldval, __IntPtr newval);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_AtomicSetPtr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr AtomicSetPtr(__IntPtr* a, __IntPtr v);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_AtomicGetPtr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr AtomicGetPtr(__IntPtr* a);
        }

        /// <summary>Try to lock a spin lock by setting it to a non-zero value.</summary>
        /// <param name="lock">a pointer to a lock variable</param>
        /// <remarks>
        /// <para>***Please note that spinlocks are dangerous if you don't know what you're</para>
        /// <para>doing. Please be careful using any sort of spinlock!***</para>
        /// <para>SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already</para>
        /// <para>held.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LockSpinlock</para>
        /// <para>SDL_UnlockSpinlock</para>
        /// </remarks>
        public static bool TryLockSpinlock(ref int @lock)
        {
            fixed (int* __lock0 = &@lock)
            {
                var __arg0 = __lock0;
                var ___ret = __Internal.TryLockSpinlock(__arg0);
                return ___ret;
            }
        }

        /// <summary>Lock a spin lock by setting it to a non-zero value.</summary>
        /// <param name="lock">a pointer to a lock variable</param>
        /// <remarks>
        /// <para>***Please note that spinlocks are dangerous if you don't know what you're</para>
        /// <para>doing. Please be careful using any sort of spinlock!***</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_TryLockSpinlock</para>
        /// <para>SDL_UnlockSpinlock</para>
        /// </remarks>
        public static void LockSpinlock(ref int @lock)
        {
            fixed (int* __lock0 = &@lock)
            {
                var __arg0 = __lock0;
                __Internal.LockSpinlock(__arg0);
            }
        }

        /// <summary>Unlock a spin lock by setting it to 0.</summary>
        /// <param name="lock">a pointer to a lock variable</param>
        /// <remarks>
        /// <para>Always returns immediately.</para>
        /// <para>***Please note that spinlocks are dangerous if you don't know what you're</para>
        /// <para>doing. Please be careful using any sort of spinlock!***</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_LockSpinlock</para>
        /// <para>SDL_TryLockSpinlock</para>
        /// </remarks>
        public static void UnlockSpinlock(ref int @lock)
        {
            fixed (int* __lock0 = &@lock)
            {
                var __arg0 = __lock0;
                __Internal.UnlockSpinlock(__arg0);
            }
        }

        /// <summary>
        /// <para>Memory barriers are designed to prevent reads and writes from being</para>
        /// <para>reordered by the compiler and being seen out of order on multi-core CPUs.</para>
        /// </summary>
        /// <remarks>
        /// <para>A typical pattern would be for thread A to write some data and a flag, and</para>
        /// <para>for thread B to read the flag and get the data. In this case you would</para>
        /// <para>insert a release barrier between writing the data and the flag,</para>
        /// <para>guaranteeing that the data write completes no later than the flag is</para>
        /// <para>written, and you would insert an acquire barrier between reading the flag</para>
        /// <para>and reading the data, to ensure that all the reads associated with the flag</para>
        /// <para>have completed.</para>
        /// <para>In this pattern you should always see a release barrier paired with an</para>
        /// <para>acquire barrier and you should gate the data reads/writes with a single</para>
        /// <para>flag variable.</para>
        /// <para>For more information on these semantics, take a look at the blog post:</para>
        /// <para>http://preshing.com/20120913/acquire-and-release-semantics</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static void MemoryBarrierReleaseFunction()
        {
            __Internal.MemoryBarrierReleaseFunction();
        }

        public static void MemoryBarrierAcquireFunction()
        {
            __Internal.MemoryBarrierAcquireFunction();
        }

        /// <summary>Set an atomic variable to a new value if it is currently an old value.</summary>
        /// <param name="a">a pointer to an SDL_AtomicInt variable to be modified</param>
        /// <param name="oldval">the old value</param>
        /// <param name="newval">the new value</param>
        /// <remarks>
        /// <para>***Note: If you don't know what this function is for, you shouldn't use</para>
        /// <para>it!***</para>
        /// <para>SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_AtomicCompareAndSwapPointer</para>
        /// <para>SDL_AtomicGet</para>
        /// <para>SDL_AtomicSet</para>
        /// </remarks>
        public static bool AtomicCompareAndSwap(global::SDL3Sharp.AtomicInt a, int oldval, int newval)
        {
            var __arg0 = a is null ? __IntPtr.Zero : a.__Instance;
            var ___ret = __Internal.AtomicCompareAndSwap(__arg0, oldval, newval);
            return ___ret;
        }

        /// <summary>Set an atomic variable to a value.</summary>
        /// <param name="a">a pointer to an SDL_AtomicInt variable to be modified</param>
        /// <param name="v">the desired value</param>
        /// <remarks>
        /// <para>This function also acts as a full memory barrier.</para>
        /// <para>***Note: If you don't know what this function is for, you shouldn't use</para>
        /// <para>it!***</para>
        /// <para>the previous value of the atomic variable.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_AtomicGet</para>
        /// </remarks>
        public static int AtomicSet(global::SDL3Sharp.AtomicInt a, int v)
        {
            var __arg0 = a is null ? __IntPtr.Zero : a.__Instance;
            var ___ret = __Internal.AtomicSet(__arg0, v);
            return ___ret;
        }

        /// <summary>Get the value of an atomic variable.</summary>
        /// <param name="a">a pointer to an SDL_AtomicInt variable</param>
        /// <remarks>
        /// <para>***Note: If you don't know what this function is for, you shouldn't use</para>
        /// <para>it!***</para>
        /// <para>the current value of an atomic variable.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_AtomicSet</para>
        /// </remarks>
        public static int AtomicGet(global::SDL3Sharp.AtomicInt a)
        {
            var __arg0 = a is null ? __IntPtr.Zero : a.__Instance;
            var ___ret = __Internal.AtomicGet(__arg0);
            return ___ret;
        }

        /// <summary>Add to an atomic variable.</summary>
        /// <param name="a">a pointer to an SDL_AtomicInt variable to be modified</param>
        /// <param name="v">the desired value to add</param>
        /// <remarks>
        /// <para>This function also acts as a full memory barrier.</para>
        /// <para>***Note: If you don't know what this function is for, you shouldn't use</para>
        /// <para>it!***</para>
        /// <para>the previous value of the atomic variable.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_AtomicDecRef</para>
        /// <para>SDL_AtomicIncRef</para>
        /// </remarks>
        public static int AtomicAdd(global::SDL3Sharp.AtomicInt a, int v)
        {
            var __arg0 = a is null ? __IntPtr.Zero : a.__Instance;
            var ___ret = __Internal.AtomicAdd(__arg0, v);
            return ___ret;
        }

        /// <summary>Set a pointer to a new value if it is currently an old value.</summary>
        /// <param name="a">a pointer to a pointer</param>
        /// <param name="oldval">the old pointer value</param>
        /// <param name="newval">the new pointer value</param>
        /// <remarks>
        /// <para>***Note: If you don't know what this function is for, you shouldn't use</para>
        /// <para>it!***</para>
        /// <para>SDL_TRUE if the pointer was set, SDL_FALSE otherwise.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_AtomicCompareAndSwap</para>
        /// <para>SDL_AtomicGetPtr</para>
        /// <para>SDL_AtomicSetPtr</para>
        /// </remarks>
        public static bool AtomicCompareAndSwapPointer(__IntPtr* a, __IntPtr oldval, __IntPtr newval)
        {
            var ___ret = __Internal.AtomicCompareAndSwapPointer(a, oldval, newval);
            return ___ret;
        }

        /// <summary>Set a pointer to a value atomically.</summary>
        /// <param name="a">a pointer to a pointer</param>
        /// <param name="v">the desired pointer value</param>
        /// <remarks>
        /// <para>***Note: If you don't know what this function is for, you shouldn't use</para>
        /// <para>it!***</para>
        /// <para>the previous value of the pointer.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_AtomicCompareAndSwapPointer</para>
        /// <para>SDL_AtomicGetPtr</para>
        /// </remarks>
        public static __IntPtr AtomicSetPtr(__IntPtr* a, __IntPtr v)
        {
            var ___ret = __Internal.AtomicSetPtr(a, v);
            return ___ret;
        }

        /// <summary>Get the value of a pointer atomically.</summary>
        /// <param name="a">a pointer to a pointer</param>
        /// <remarks>
        /// <para>***Note: If you don't know what this function is for, you shouldn't use</para>
        /// <para>it!***</para>
        /// <para>the current value of a pointer.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_AtomicCompareAndSwapPointer</para>
        /// <para>SDL_AtomicSetPtr</para>
        /// </remarks>
        public static __IntPtr AtomicGetPtr(__IntPtr* a)
        {
            var ___ret = __Internal.AtomicGetPtr(a);
            return ___ret;
        }
    }
}
