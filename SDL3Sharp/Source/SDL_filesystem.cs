// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>The type of the OS-provided default folder for a specific purpose.</summary>
    /// <remarks>
    /// <para>Note that the Trash folder isn't included here, because trashing files usually</para>
    /// <para>involves extra OS-specific functionality to remember the file's original</para>
    /// <para>location.</para>
    /// <para>The folders supported per platform are:</para>
    /// <para>|             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten |</para>
    /// <para>| ----------- | ------- | --------- | ---- | ---------- | ----- | ---------- |</para>
    /// <para>| HOME        | X       | X         |      | X          | X     | X          |</para>
    /// <para>| DESKTOP     | X       | X         |      | X          | X     |            |</para>
    /// <para>| DOCUMENTS   | X       | X         |      | X          |       |            |</para>
    /// <para>| DOWNLOADS   | Vista+  | X         |      | X          |       |            |</para>
    /// <para>| MUSIC       | X       | X         |      | X          |       |            |</para>
    /// <para>| PICTURES    | X       | X         |      | X          |       |            |</para>
    /// <para>| PUBLICSHARE |         | X         |      | X          |       |            |</para>
    /// <para>| SAVEDGAMES  | Vista+  |           |      |            |       |            |</para>
    /// <para>| SCREENSHOTS | Vista+  |           |      |            |       |            |</para>
    /// <para>| TEMPLATES   | X       | X         |      | X          |       |            |</para>
    /// <para>| VIDEOS      | X       | X*        |      | X          |       |            |</para>
    /// <para>* Note that on macOS/iOS, the Videos folder is called &quot;Movies&quot;.</para>
    /// <para>SDL_GetUserFolder</para>
    /// </remarks>
    public enum Folder
    {
        /// <summary>
        /// <para>The folder which contains all of the current user's data, preferences,</para>
        /// <para>and documents. It usually contains most of the other folders. If a</para>
        /// <para>requested folder does not exist, the home folder can be considered a safe</para>
        /// <para>fallback to store a user's documents.</para>
        /// </summary>
        Home = 0,
        /// <summary>
        /// <para>The folder of files that are displayed on the desktop. Note that the</para>
        /// <para>existence of a desktop folder does not guarantee that the system does</para>
        /// <para>show icons on its desktop; certain GNU/Linux distros with a graphical</para>
        /// <para>environment may not have desktop icons.</para>
        /// </summary>
        Desktop = 1,
        /// <summary>
        /// <para>User document files, possibly application-specific. This is a good</para>
        /// <para>place to save a user's projects.</para>
        /// </summary>
        Documents = 2,
        /// <summary>Standard folder for user files downloaded from the internet.</summary>
        Downloads = 3,
        /// <summary>
        /// <para>Music files that can be played using a standard music player (mp3,</para>
        /// <para>ogg...).</para>
        /// </summary>
        Music = 4,
        /// <summary>
        /// <para>Image files that can be displayed using a standard viewer (png,</para>
        /// <para>jpg...).</para>
        /// </summary>
        Pictures = 5,
        /// <summary>
        /// <para>Files that are meant to be shared with other users on the same</para>
        /// <para>computer.</para>
        /// </summary>
        Publicshare = 6,
        /// <summary>Save files for games.</summary>
        Savedgames = 7,
        /// <summary>Application screenshots.</summary>
        Screenshots = 8,
        /// <summary>
        /// <para>Template files to be used when the user requests the desktop environment</para>
        /// <para>to create a new file in a certain folder, such as &quot;New Text File.txt&quot;.</para>
        /// <para>Any file in the Templates folder can be used as a starting point for a</para>
        /// <para>new file.</para>
        /// </summary>
        Templates = 9,
        /// <summary>
        /// <para>Video files that can be played using a standard video player (mp4,</para>
        /// <para>webm...).</para>
        /// </summary>
        Videos = 10
    }

    /// <summary>The type of the OS-provided default folder for a specific purpose.</summary>
    /// <remarks>
    /// <para>Note that the Trash folder isn't included here, because trashing files usually</para>
    /// <para>involves extra OS-specific functionality to remember the file's original</para>
    /// <para>location.</para>
    /// <para>The folders supported per platform are:</para>
    /// <para>|             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten |</para>
    /// <para>| ----------- | ------- | --------- | ---- | ---------- | ----- | ---------- |</para>
    /// <para>| HOME        | X       | X         |      | X          | X     | X          |</para>
    /// <para>| DESKTOP     | X       | X         |      | X          | X     |            |</para>
    /// <para>| DOCUMENTS   | X       | X         |      | X          |       |            |</para>
    /// <para>| DOWNLOADS   | Vista+  | X         |      | X          |       |            |</para>
    /// <para>| MUSIC       | X       | X         |      | X          |       |            |</para>
    /// <para>| PICTURES    | X       | X         |      | X          |       |            |</para>
    /// <para>| PUBLICSHARE |         | X         |      | X          |       |            |</para>
    /// <para>| SAVEDGAMES  | Vista+  |           |      |            |       |            |</para>
    /// <para>| SCREENSHOTS | Vista+  |           |      |            |       |            |</para>
    /// <para>| TEMPLATES   | X       | X         |      | X          |       |            |</para>
    /// <para>| VIDEOS      | X       | X*        |      | X          |       |            |</para>
    /// <para>* Note that on macOS/iOS, the Videos folder is called &quot;Movies&quot;.</para>
    /// <para>SDL_GetUserFolder</para>
    /// </remarks>
    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetBasePath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetBasePath();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetPrefPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetPrefPath([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string org, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string app);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetUserFolder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetUserFolder(global::SDL3Sharp.Folder folder);
        }

        /// <summary>Get the directory where the application was run from.</summary>
        /// <remarks>
        /// <para>This is not necessarily a fast call, so you should call this once near</para>
        /// <para>startup and save the string if you need it.</para>
        /// <para>**macOS and iOS Specific Functionality**: If the application is in a &quot;.app&quot;</para>
        /// <para>bundle, this function returns the Resource directory (e.g.</para>
        /// <para>MyApp.app/Contents/Resources/). This behaviour can be overridden by adding</para>
        /// <para>a property to the Info.plist file. Adding a string key with the name</para>
        /// <para>SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the</para>
        /// <para>behaviour.</para>
        /// <para>Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an</para>
        /// <para>application in /Applications/SDLApp/MyApp.app):</para>
        /// <para>- `resource`: bundle resource directory (the default). For example:</para>
        /// <para>`/Applications/SDLApp/MyApp.app/Contents/Resources`</para>
        /// <para>- `bundle`: the Bundle directory. For example:</para>
        /// <para>`/Applications/SDLApp/MyApp.app/`</para>
        /// <para>- `parent`: the containing directory of the bundle. For example:</para>
        /// <para>`/Applications/SDLApp/`</para>
        /// <para>**Nintendo 3DS Specific Functionality**: This function returns &quot;romfs&quot;</para>
        /// <para>directory of the application as it is uncommon to store resources outside</para>
        /// <para>the executable. As such it is not a writable directory.</para>
        /// <para>The returned path is guaranteed to end with a path separator ('\' on</para>
        /// <para>Windows, '/' on most other platforms).</para>
        /// <para>The pointer returned is owned by the caller. Please call SDL_free() on the</para>
        /// <para>pointer when done with it.</para>
        /// <para>an absolute path in UTF-8 encoding to the application data</para>
        /// <para>directory. NULL will be returned on error or when the platform</para>
        /// <para>doesn't implement this functionality, call SDL_GetError() for more</para>
        /// <para>information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetPrefPath</para>
        /// </remarks>
        public static sbyte* GetBasePath()
        {
            var ___ret = __Internal.GetBasePath();
            return ___ret;
        }

        /// <summary>Get the user-and-app-specific path where files can be written.</summary>
        /// <param name="org">the name of your organization</param>
        /// <param name="app">the name of your application</param>
        /// <remarks>
        /// <para>Get the &quot;pref dir&quot;. This is meant to be where users can write personal</para>
        /// <para>files (preferences and save games, etc) that are specific to your</para>
        /// <para>application. This directory is unique per user, per application.</para>
        /// <para>This function will decide the appropriate location in the native</para>
        /// <para>filesystem, create the directory if necessary, and return a string of the</para>
        /// <para>absolute path to the directory in UTF-8 encoding.</para>
        /// <para>On Windows, the string might look like:</para>
        /// <para>`C:\Users\bob\AppData\Roaming\My Company\My Program Name\`</para>
        /// <para>On Linux, the string might look like:</para>
        /// <para>`/home/bob/.local/share/My Program Name/`</para>
        /// <para>On macOS, the string might look like:</para>
        /// <para>`/Users/bob/Library/Application Support/My Program Name/`</para>
        /// <para>You should assume the path returned by this function is the only safe place</para>
        /// <para>to write files (and that SDL_GetBasePath(), while it might be writable, or</para>
        /// <para>even the parent of the returned path, isn't where you should be writing</para>
        /// <para>things).</para>
        /// <para>Both the org and app strings may become part of a directory name, so please</para>
        /// <para>follow these rules:</para>
        /// <para>- Try to use the same org string (_including case-sensitivity_) for all</para>
        /// <para>your applications that use this function.</para>
        /// <para>- Always use a unique app string for each one, and make sure it never</para>
        /// <para>changes for an app once you've decided on it.</para>
        /// <para>- Unicode characters are legal, as long as it's UTF-8 encoded, but...</para>
        /// <para>- ...only use letters, numbers, and spaces. Avoid punctuation like &quot;Game</para>
        /// <para>Name 2: Bad Guy's Revenge!&quot; ... &quot;Game Name 2&quot; is sufficient.</para>
        /// <para>The returned path is guaranteed to end with a path separator ('\' on</para>
        /// <para>Windows, '/' on most other platforms).</para>
        /// <para>The pointer returned is owned by the caller. Please call SDL_free() on the</para>
        /// <para>pointer when done with it.</para>
        /// <para>a UTF-8 string of the user directory in platform-dependent</para>
        /// <para>notation. NULL if there's a problem (creating directory failed,</para>
        /// <para>etc.).</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetBasePath</para>
        /// </remarks>
        public static sbyte* GetPrefPath(string org, string app)
        {
            var ___ret = __Internal.GetPrefPath(org, app);
            return ___ret;
        }

        /// <summary>
        /// <para>Finds the most suitable user folder for the specified purpose, and returns</para>
        /// <para>its path in OS-specific notation.</para>
        /// </summary>
        /// <param name="folder">The type of folder to find</param>
        /// <remarks>
        /// <para>Many OSes provide certain standard folders for certain purposes, such as</para>
        /// <para>storing pictures, music or videos for a certain user. This function gives</para>
        /// <para>the path for many of those special locations.</para>
        /// <para>This function is specifically for _user_ folders, which are meant for the</para>
        /// <para>user to access and manage. For application-specific folders, meant to hold</para>
        /// <para>data for the application to manage, see SDL_GetBasePath() and</para>
        /// <para>SDL_GetPrefPath().</para>
        /// <para>Note that the function is expensive, and should be called once at the</para>
        /// <para>beginning of the execution and kept for as long as needed.</para>
        /// <para>The returned value is owned by the caller and should be freed with</para>
        /// <para>SDL_free().</para>
        /// <para>If NULL is returned, the error may be obtained with SDL_GetError().</para>
        /// <para>Either a null-terminated C string containing the full path to the</para>
        /// <para>folder, or NULL if an error happened.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_Folder</para>
        /// </remarks>
        public static sbyte* GetUserFolder(global::SDL3Sharp.Folder folder)
        {
            var ___ret = __Internal.GetUserFolder(folder);
            return ___ret;
        }
    }
}
