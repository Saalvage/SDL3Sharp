// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    public enum Errorcode
    {
        Enomem = 0,
        Efread = 1,
        Efwrite = 2,
        Efseek = 3,
        Unsupported = 4,
        Lasterror = 5
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetError();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ClearError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearError();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_Error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Error(global::SDL3Sharp.Errorcode code);
        }

        /// <summary>Set the SDL error message for the current thread.</summary>
        /// <param name="fmt">a printf()-style message format string</param>
        /// <param name="...">
        /// <para>additional parameters matching % tokens in the `fmt` string, if</para>
        /// <para>any</para>
        /// </param>
        /// <remarks>
        /// <para>Calling this function will replace any previous error message that was set.</para>
        /// <para>This function always returns -1, since SDL frequently uses -1 to signify an</para>
        /// <para>failing result, leading to this idiom:</para>
        /// <para>```c</para>
        /// <para>if (error_code) {</para>
        /// <para>return SDL_SetError(&quot;This operation has failed: %d&quot;, error_code);</para>
        /// <para>}</para>
        /// <para>```</para>
        /// <para>always -1.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_ClearError</para>
        /// <para>SDL_GetError</para>
        /// </remarks>
        public static int SetError(string fmt)
        {
            var ___ret = __Internal.SetError(fmt);
            return ___ret;
        }

        /// <summary>
        /// <para>Retrieve a message about the last error that occurred on the current</para>
        /// <para>thread.</para>
        /// </summary>
        /// <remarks>
        /// <para>It is possible for multiple errors to occur before calling SDL_GetError().</para>
        /// <para>Only the last error is returned.</para>
        /// <para>The message is only applicable when an SDL function has signaled an error.</para>
        /// <para>You must check the return values of SDL function calls to determine when to</para>
        /// <para>appropriately call SDL_GetError(). You should *not* use the results of</para>
        /// <para>SDL_GetError() to decide if an error has occurred! Sometimes SDL will set</para>
        /// <para>an error string even when reporting success.</para>
        /// <para>SDL will *not* clear the error string for successful API calls. You *must*</para>
        /// <para>check return values for failure cases before you can assume the error</para>
        /// <para>string applies.</para>
        /// <para>Error strings are set per-thread, so an error set in a different thread</para>
        /// <para>will not interfere with the current thread's operation.</para>
        /// <para>The returned string is internally allocated and must not be freed by the</para>
        /// <para>application.</para>
        /// <para>a message with information about the specific error that occurred,</para>
        /// <para>or an empty string if there hasn't been an error message set since</para>
        /// <para>the last call to SDL_ClearError(). The message is only applicable</para>
        /// <para>when an SDL function has signaled an error. You must check the</para>
        /// <para>return values of SDL function calls to determine when to</para>
        /// <para>appropriately call SDL_GetError().</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_ClearError</para>
        /// <para>SDL_SetError</para>
        /// </remarks>
        public static string GetError()
        {
            var ___ret = __Internal.GetError();
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Clear any previous error message for this thread.</summary>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetError</para>
        /// <para>SDL_SetError</para>
        /// </remarks>
        public static void ClearError()
        {
            __Internal.ClearError();
        }

        /// <summary>SDL_Error()</summary>
        /// <param name="code">Error code</param>
        /// <remarks>
        /// <para>unconditionally -1.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static int Error(global::SDL3Sharp.Errorcode code)
        {
            var ___ret = __Internal.Error(code);
            return ___ret;
        }
    }
}
