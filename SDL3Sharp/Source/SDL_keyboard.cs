// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#pragma warning disable CS9084 // Struct member returns 'this' or other instance members by reference

namespace SDL3Sharp
{
    /// <summary>The SDL keysym structure, used in key events.</summary>
    /// <remarks>If you are looking for translated character input, see the ::SDL_EVENT_TEXT_INPUT event.</remarks>
    /// <summary>The SDL keysym structure, used in key events.</summary>
    /// <remarks>If you are looking for translated character input, see the ::SDL_EVENT_TEXT_INPUT event.</remarks>
    public unsafe partial class Keysym : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16, Pack = 8)]
        public partial struct __Internal
        {
            internal global::SDL3Sharp.Scancode scancode;
            internal int sym;
            internal ushort mod;
            internal uint unused;

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "??0SDL_Keysym@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.Keysym> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SDL3Sharp.Keysym>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SDL3Sharp.Keysym managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SDL3Sharp.Keysym managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Keysym __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Keysym(native.ToPointer(), skipVTables);
        }

        internal static Keysym __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Keysym)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Keysym __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Keysym(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Keysym(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Keysym(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public Keysym()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.Keysym.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public Keysym(global::SDL3Sharp.Keysym _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SDL3Sharp.Keysym.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SDL3Sharp.Keysym.__Internal*) __Instance) = *((global::SDL3Sharp.Keysym.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>SDL physical key code - see ::SDL_Scancode for details</summary>
        public global::SDL3Sharp.Scancode Scancode
        {
            get
            {
                return ((__Internal*)__Instance)->scancode;
            }

            set
            {
                ((__Internal*)__Instance)->scancode = value;
            }
        }

        /// <summary>SDL virtual key code - see ::SDL_Keycode for details</summary>
        public int Sym
        {
            get
            {
                return ((__Internal*)__Instance)->sym;
            }

            set
            {
                ((__Internal*)__Instance)->sym = value;
            }
        }

        /// <summary>current key modifiers</summary>
        public ushort Mod
        {
            get
            {
                return ((__Internal*)__Instance)->mod;
            }

            set
            {
                ((__Internal*)__Instance)->mod = value;
            }
        }

        public uint Unused
        {
            get
            {
                return ((__Internal*)__Instance)->unused;
            }

            set
            {
                ((__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetKeyboardFocus", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetKeyboardFocus();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetKeyboardState", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* GetKeyboardState(int* numkeys);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ResetKeyboard", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetKeyboard();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetModState", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SDL3Sharp.Keymod GetModState();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetModState", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetModState(global::SDL3Sharp.Keymod modstate);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetKeyFromScancode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetKeyFromScancode(global::SDL3Sharp.Scancode scancode);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetScancodeFromKey", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SDL3Sharp.Scancode GetScancodeFromKey(int key);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetScancodeName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetScancodeName(global::SDL3Sharp.Scancode scancode);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetScancodeFromName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SDL3Sharp.Scancode GetScancodeFromName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetKeyName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetKeyName(int key);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_GetKeyFromName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetKeyFromName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_StartTextInput", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartTextInput();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_TextInputActive", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool TextInputActive();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_StopTextInput", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StopTextInput();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ClearComposition", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearComposition();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_TextInputShown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool TextInputShown();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_SetTextInputRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetTextInputRect(__IntPtr rect);

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_HasScreenKeyboardSupport", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool HasScreenKeyboardSupport();

            [SuppressUnmanagedCodeSecurity, DllImport("SDL3", EntryPoint = "SDL_ScreenKeyboardShown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool ScreenKeyboardShown(__IntPtr window);
        }

        /// <summary>Query the window which currently has keyboard focus.</summary>
        /// <remarks>
        /// <para>the window with keyboard focus.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static global::SDL3Sharp.Window GetKeyboardFocus()
        {
            var ___ret = __Internal.GetKeyboardFocus();
            var __result0 = global::SDL3Sharp.Window.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Get a snapshot of the current state of the keyboard.</summary>
        /// <param name="numkeys">if non-NULL, receives the length of the returned array</param>
        /// <remarks>
        /// <para>The pointer returned is a pointer to an internal SDL array. It will be</para>
        /// <para>valid for the whole lifetime of the application and should not be freed by</para>
        /// <para>the caller.</para>
        /// <para>A array element with a value of 1 means that the key is pressed and a value</para>
        /// <para>of 0 means that it is not. Indexes into this array are obtained by using</para>
        /// <para>SDL_Scancode values.</para>
        /// <para>Use SDL_PumpEvents() to update the state array.</para>
        /// <para>This function gives you the current state after all events have been</para>
        /// <para>processed, so if a key or button has been pressed and released before you</para>
        /// <para>process events, then the pressed state will never show up in the</para>
        /// <para>SDL_GetKeyboardState() calls.</para>
        /// <para>Note: This function doesn't take into account whether shift has been</para>
        /// <para>pressed or not.</para>
        /// <para>a pointer to an array of key states.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_PumpEvents</para>
        /// <para>SDL_ResetKeyboard</para>
        /// </remarks>
        public static byte* GetKeyboardState(ref int numkeys)
        {
            fixed (int* __numkeys0 = &numkeys)
            {
                var __arg0 = __numkeys0;
                var ___ret = __Internal.GetKeyboardState(__arg0);
                return ___ret;
            }
        }

        /// <summary>Clear the state of the keyboard</summary>
        /// <remarks>
        /// <para>This function will generate key up events for all pressed keys.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetKeyboardState</para>
        /// </remarks>
        public static void ResetKeyboard()
        {
            __Internal.ResetKeyboard();
        }

        /// <summary>Get the current key modifier state for the keyboard.</summary>
        /// <remarks>
        /// <para>an OR'd combination of the modifier keys for the keyboard. See</para>
        /// <para>SDL_Keymod for details.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetKeyboardState</para>
        /// <para>SDL_SetModState</para>
        /// </remarks>
        public static global::SDL3Sharp.Keymod GetModState()
        {
            var ___ret = __Internal.GetModState();
            return ___ret;
        }

        /// <summary>Set the current key modifier state for the keyboard.</summary>
        /// <param name="modstate">the desired SDL_Keymod for the keyboard</param>
        /// <remarks>
        /// <para>The inverse of SDL_GetModState(), SDL_SetModState() allows you to impose</para>
        /// <para>modifier key states on your application. Simply pass your desired modifier</para>
        /// <para>states into `modstate`. This value may be a bitwise, OR'd combination of</para>
        /// <para>SDL_Keymod values.</para>
        /// <para>This does not change the keyboard state, only the key modifier flags that</para>
        /// <para>SDL reports.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetModState</para>
        /// </remarks>
        public static void SetModState(global::SDL3Sharp.Keymod modstate)
        {
            __Internal.SetModState(modstate);
        }

        /// <summary>
        /// <para>Get the key code corresponding to the given scancode according to the</para>
        /// <para>current keyboard layout.</para>
        /// </summary>
        /// <param name="scancode">the desired SDL_Scancode to query</param>
        /// <remarks>
        /// <para>See SDL_Keycode for details.</para>
        /// <para>the SDL_Keycode that corresponds to the given SDL_Scancode.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetKeyName</para>
        /// <para>SDL_GetScancodeFromKey</para>
        /// </remarks>
        public static int GetKeyFromScancode(global::SDL3Sharp.Scancode scancode)
        {
            var ___ret = __Internal.GetKeyFromScancode(scancode);
            return ___ret;
        }

        /// <summary>
        /// <para>Get the scancode corresponding to the given key code according to the</para>
        /// <para>current keyboard layout.</para>
        /// </summary>
        /// <param name="key">the desired SDL_Keycode to query</param>
        /// <remarks>
        /// <para>See SDL_Scancode for details.</para>
        /// <para>the SDL_Scancode that corresponds to the given SDL_Keycode.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetKeyFromScancode</para>
        /// <para>SDL_GetScancodeName</para>
        /// </remarks>
        public static global::SDL3Sharp.Scancode GetScancodeFromKey(int key)
        {
            var ___ret = __Internal.GetScancodeFromKey(key);
            return ___ret;
        }

        /// <summary>Get a human-readable name for a scancode.</summary>
        /// <param name="scancode">the desired SDL_Scancode to query</param>
        /// <remarks>
        /// <para>See SDL_Scancode for details.</para>
        /// <para>**Warning**: The returned name is by design not stable across platforms,</para>
        /// <para>e.g. the name for `SDL_SCANCODE_LGUI` is &quot;Left GUI&quot; under Linux but &quot;Left</para>
        /// <para>Windows&quot; under Microsoft Windows, and some scancodes like</para>
        /// <para>`SDL_SCANCODE_NONUSBACKSLASH` don't have any name at all. There are even</para>
        /// <para>scancodes that share names, e.g. `SDL_SCANCODE_RETURN` and</para>
        /// <para>`SDL_SCANCODE_RETURN2` (both called &quot;Return&quot;). This function is therefore</para>
        /// <para>unsuitable for creating a stable cross-platform two-way mapping between</para>
        /// <para>strings and scancodes.</para>
        /// <para>a pointer to the name for the scancode. If the scancode doesn't</para>
        /// <para>have a name this function returns an empty string (&quot;&quot;).</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetScancodeFromKey</para>
        /// <para>SDL_GetScancodeFromName</para>
        /// </remarks>
        public static string GetScancodeName(global::SDL3Sharp.Scancode scancode)
        {
            var ___ret = __Internal.GetScancodeName(scancode);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Get a scancode from a human-readable name.</summary>
        /// <param name="name">the human-readable scancode name</param>
        /// <remarks>
        /// <para>the SDL_Scancode, or `SDL_SCANCODE_UNKNOWN` if the name wasn't</para>
        /// <para>recognized; call SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetKeyFromName</para>
        /// <para>SDL_GetScancodeFromKey</para>
        /// <para>SDL_GetScancodeName</para>
        /// </remarks>
        public static global::SDL3Sharp.Scancode GetScancodeFromName(string name)
        {
            var ___ret = __Internal.GetScancodeFromName(name);
            return ___ret;
        }

        /// <summary>Get a human-readable name for a key.</summary>
        /// <param name="key">the desired SDL_Keycode to query</param>
        /// <remarks>
        /// <para>See SDL_Scancode and SDL_Keycode for details.</para>
        /// <para>a pointer to a UTF-8 string that stays valid at least until the</para>
        /// <para>next call to this function. If you need it around any longer, you</para>
        /// <para>must copy it. If the key doesn't have a name, this function</para>
        /// <para>returns an empty string (&quot;&quot;).</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetKeyFromName</para>
        /// <para>SDL_GetKeyFromScancode</para>
        /// <para>SDL_GetScancodeFromKey</para>
        /// </remarks>
        public static string GetKeyName(int key)
        {
            var ___ret = __Internal.GetKeyName(key);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Get a key code from a human-readable name.</summary>
        /// <param name="name">the human-readable key name</param>
        /// <remarks>
        /// <para>key code, or `SDLK_UNKNOWN` if the name wasn't recognized; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_GetKeyFromScancode</para>
        /// <para>SDL_GetKeyName</para>
        /// <para>SDL_GetScancodeFromName</para>
        /// </remarks>
        public static int GetKeyFromName(string name)
        {
            var ___ret = __Internal.GetKeyFromName(name);
            return ___ret;
        }

        /// <summary>Start accepting Unicode text input events.</summary>
        /// <remarks>
        /// <para>This function will start accepting Unicode text input events in the focused</para>
        /// <para>SDL window, and start emitting SDL_TextInputEvent (SDL_EVENT_TEXT_INPUT)</para>
        /// <para>and SDL_TextEditingEvent (SDL_EVENT_TEXT_EDITING) events. Please use this</para>
        /// <para>function in pair with SDL_StopTextInput().</para>
        /// <para>Text input events are received by default.</para>
        /// <para>On some platforms using this function activates the screen keyboard.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_SetTextInputRect</para>
        /// <para>SDL_StopTextInput</para>
        /// </remarks>
        public static void StartTextInput()
        {
            __Internal.StartTextInput();
        }

        /// <summary>Check whether or not Unicode text input events are enabled.</summary>
        /// <remarks>
        /// <para>SDL_TRUE if text input events are enabled else SDL_FALSE.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_StartTextInput</para>
        /// </remarks>
        public static bool TextInputActive()
        {
            var ___ret = __Internal.TextInputActive();
            return ___ret;
        }

        /// <summary>Stop receiving any text input events.</summary>
        /// <remarks>
        /// <para>Text input events are received by default.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_StartTextInput</para>
        /// </remarks>
        public static void StopTextInput()
        {
            __Internal.StopTextInput();
        }

        /// <summary>Dismiss the composition window/IME without disabling the subsystem.</summary>
        /// <remarks>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_StartTextInput</para>
        /// <para>SDL_StopTextInput</para>
        /// </remarks>
        public static void ClearComposition()
        {
            __Internal.ClearComposition();
        }

        /// <summary>Returns if an IME Composite or Candidate window is currently shown.</summary>
        /// <remarks>
        /// <para>SDL_TRUE if shown, else SDL_FALSE</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// </remarks>
        public static bool TextInputShown()
        {
            var ___ret = __Internal.TextInputShown();
            return ___ret;
        }

        /// <summary>Set the rectangle used to type Unicode text inputs.</summary>
        /// <param name="rect">
        /// <para>the SDL_Rect structure representing the rectangle to receive</para>
        /// <para>text (ignored if NULL)</para>
        /// </param>
        /// <remarks>
        /// <para>Native input methods will place a window with word suggestions near it,</para>
        /// <para>without covering the text being inputted.</para>
        /// <para>To start text input in a given location, this function is intended to be</para>
        /// <para>called before SDL_StartTextInput, although some platforms support moving</para>
        /// <para>the rectangle even while text input (and a composition) is active.</para>
        /// <para>Note: If you want to use the system native IME window, try setting hint</para>
        /// <para>**SDL_HINT_IME_SHOW_UI** to **1**, otherwise this function won't give you</para>
        /// <para>any feedback.</para>
        /// <para>0 on success or a negative error code on failure; call</para>
        /// <para>SDL_GetError() for more information.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_StartTextInput</para>
        /// </remarks>
        public static int SetTextInputRect(global::SDL3Sharp.Rect rect)
        {
            var __arg0 = rect is null ? __IntPtr.Zero : rect.__Instance;
            var ___ret = __Internal.SetTextInputRect(__arg0);
            return ___ret;
        }

        /// <summary>Check whether the platform has screen keyboard support.</summary>
        /// <remarks>
        /// <para>SDL_TRUE if the platform has some screen keyboard support or</para>
        /// <para>SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_StartTextInput</para>
        /// <para>SDL_ScreenKeyboardShown</para>
        /// </remarks>
        public static bool HasScreenKeyboardSupport()
        {
            var ___ret = __Internal.HasScreenKeyboardSupport();
            return ___ret;
        }

        /// <summary>Check whether the screen keyboard is shown for given window.</summary>
        /// <param name="window">the window for which screen keyboard should be queried</param>
        /// <remarks>
        /// <para>SDL_TRUE if screen keyboard is shown or SDL_FALSE if not.</para>
        /// <para>This function is available since SDL 3.0.0.</para>
        /// <para>SDL_HasScreenKeyboardSupport</para>
        /// </remarks>
        public static bool ScreenKeyboardShown(global::SDL3Sharp.Window window)
        {
            var __arg0 = window is null ? __IntPtr.Zero : window.__Instance;
            var ___ret = __Internal.ScreenKeyboardShown(__arg0);
            return ___ret;
        }
    }
}
